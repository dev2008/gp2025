<!DOCTYPE html><html>  <head>    <meta http-equiv="content-type" content="text/html; charset=UTF-8">    <title>DaDaBIK (DaDaBIK is a DataBase Interfaces Kreator) -      https://dadabik.com/ - Documentation</title>    <style>body{margin-right:10%;margin-left:10%;}body, p, h1, h2, h3{line-height:120%;font-family: Helvetica;}li{margin-top:10px;}</style> </head>  <body>    <h1>DaDaBIK Documentation</h1>    <a name="general_information"></a>    <h1>Introduction</h1>    <p><strong>Latest release:</strong> 12.3 Aveto (released September 12, 2024).      This manual is about V. 12.3 Aveto, if you need the      documentation for a previous release please read the documentation file      included in the package you downloaded; the features described in this      file refers to DaDaBIK Platinum Version, some of these features might be      not available for DaDaBIK Pro or Enterprise. Check the <a href="https://dadabik.com/index.php?function=show_pricing">features        comparison</a> for further details.</p>    <h1><a name="table_of_contents"></a>Table of contents<br>    </h1>    <p>1. <a href="#what_is_dadabik">What is DaDaBIK?</a><br>      2. <a href="#requirements">Requirements</a><br>      3. <a href="#license">License</a><br>      4. <a href="#video_tutorials">Video tutorials</a><br>      5. <a href="#installation">Installation &amp; upgrade</a><br>      6. <a href="#config">The config.php and config_custom.php files</a><br>      7. <a href="#configuration">How to develop a DaDaBIK application</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_introduction">7.1. Introduction</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_lookup">7.2. How to configure a drop-down lookup field</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_hide">7.3. How to hide a field from a form</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_upload">7.4. How to manage uploaded file (images and other      files) fields</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_masterdetails">7.5. How to create a Master/Details view (subforms)</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_views">7.6. How to create a pre-filtered results grid using      VIEWS</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_reports">7.7. How to create graphic reports and pivot tables</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_pdf">7.8. How to create PDF reports / documents</a><br>      &nbsp;&nbsp;&nbsp; <a href="#configuration_same_db_two_apps">7.9. How to share the same database between two or more      DaDaBIK applications</a><br>      8. <a href="#authentication">Authentication</a><br>      &nbsp;&nbsp;&nbsp; <a href="#authentication_standard">8.1. Standard Authentication</a><br>      &nbsp;&nbsp;&nbsp; <a href="#authentication_ldap">8.2. LDAP Authentication</a><br>      &nbsp;&nbsp;&nbsp; <a href="#authentication_wp">8.3. Wordpress Authentication</a><br>      &nbsp;&nbsp;&nbsp; <a href="#2fa">8.4. Two-Factor Authentication</a><br>      9. <a href="#permissions">Permissions</a><br>      10. <a href="#low_coding">How to add your custom code to DaDaBIK        (low-coding)</a><br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_calculated">10.1. Calculated fields</a> <br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_validation">10.2. Custom validation functions</a><br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_formatting">10.3. Custom formatting functions</a> <br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_required">10.4. Custom required functions / conditional fields</a> <br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_default_value">10.5. Custom default value functions</a> <br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_startup">10.6. The custom startup function</a> <br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_buttons">10.7. Standard and Custom buttons</a> <br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_hooks">10.8. Hooks</a><br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_row_level">10.9. Row-level Custom Filters </a><br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_custom_pages">10.10. Custom pages </a><br>      &nbsp;&nbsp;&nbsp; <a href="#low_coding_dashboards">10.11. Custom pages and dashboards</a><br>      11. <a href="#beta_dev_mode">The BETA development mode</a><br>      12. <a href="#import_from_csv">Import from MS          Excel / CSV / ODS</a><br>      13. <a href="#dadabik_wordpress_integration">DaDaBIK Wordpress        Integration</a><br>      14. <a href="#api">HTTP API</a><br>      15. <a href="#revisions">Audit/Revisions</a><br>      16. <a href="#live_edit">Live edit</a><br>      17. <a href="#language">Language translations</a><br>      18. <a href="#performances">Performances</a><br>      19. <a href="#security">Security</a><br>      20. <a href="#backup">Backup</a><br>      21. <a href="#best_practices">Best Practices</a><br>      22. <a href="#faqs">FAQs</a><br>      23. <a href="#bugs">Known bugs, limitations and unexpected behaviors</a><br>      24. <a href="#prev_next_unexpected">Previous/Next buttons and page navigation bar, unexpected behavior</a><br>    </p>    <h1><a name="what_is_dadabik">1. What is DaDaBIK?</a> </h1>    <hr size="1">    <p>DaDaBIK is a no-code / low-code development platform and a Web      application builder written in PHP. It allows you to easily create a      highly customizable database front-end or a database-based Web application      without coding. You can use it to create in a few minutes a very basic      CRUD (Create, Read, Update, Delete) database front-end or to develop more      sophisticated database Web applications, for example Warehouse Management      Applications, CRM applications, ERP Applications, HelpDesk Applications      and others.</p>    <p>DaDaBIK was one of the very first RAD PHP tools focused on database      applications (first version released in 2001) and it is still one of the      most popular.</p>    <!--<p>DaDaBIK uses the <a href="http://php.net/manual/en/book.pdo.php">PDO</a>      extension in order to support as many DBMSs as possible, at the moment it      officially supports MySQL, PostgreSQL, SQLite and Microsoft SQL Server.</p>-->    <p><strong>Features include</strong> (check the <a href="https://dadabik.com/index.php?function=show_pricing"        target="_blank">features        comparison</a> for further details): </p>    <ul>      <li>Forms generation/customization (also according to rules: e.g. show        field "State" only if country is "USA")</li>      <li>Datagrid generation/customization</li>      <li>Chart and Tabular reports generation:</li>      <ul>        <li>simple reports, generated in a few clicks (choose chart type, how to          aggregate data, what data to display )</li>        <li>advanced reports, using custom SQL code</li>      </ul>      <li>15 field types, including lookup fields </li>      <li>Calculated fields</li>      <li>Responsive front-end</li>      <li>File uploading</li>      <li>Master/detail views</li>      <li>Duplication checking</li>      <li>Authentication (also with Wordpress and LDAP)</li>      <li>Granular permissions</li>      <li>Integration with external user/group/password lists</li>      <li>Record locking</li>      <li>Record ownership authorizations</li>      <li>CSV export</li>      <li>PDF generation, also using custom templates</li>      <li>Email alerts</li>      <li>SQL logging</li>      <li>Revision/Audit</li>      <li>HTTP API for authentication and record selections</li>      <li>Pre-defined/custom formatting rules</li>      <li>Pre-defined/custom validation rules</li>      <li>Custom pages in PHP or simple HTML</li>      <li>Three graphic themes, two page layouts (left menu, top menu)</li>      <li>Graphic layout customizable through a documented CSS file</li>      <li>Front-end in 22 languages (English, Italian, Catalan, Chinese,        Croatian, Czech, Danish, Dutch, Estonian, Finnish, French, German,        Hungarian, Norwegian, Polish, Portuguese, Rumanian, Russian, Slovak,        Spanish, Swedish, Telugu).</li>    </ul>    <!--<p>DaDaBIK differs from software like PHPMyAdmin: it has not been created to      offer the complete administration of a database, but rather to allow the      creation of a customizable and user friendly database application. The      target of a DaDaBIK application can be the final user instead of a DB      administrator.<br>-->    <br>    <a href="#general_information">[back to top]</a>    <br><br>    <h1><a name="requirements"></a>2. Requirements</h1>    <hr size="1">    <ul>      <li><strong>Short answer:</strong></li>      <ul>        <li>DaDaBIK is a Web application written in PHP so you need a Web server          (for example <a target="_blank" href="https://httpd.apache.org/">Apache</a>),          you need <a target="_blank" href="http://php.net">PHP</a> and you          need a DBMS (<a target="_blank" href="http://www.mysql.com/">MySQL</a>, <a target="_blank" href="https://mariadb.org/">MariaDB</a>, <a target="_blank"            href="http://www.postgresql.org/">PostgreSQL</a>          , <a target="_blank" href="https://www.sqlite.org/">SQLite</a> or <a            target="_blank"            href="https://www.microsoft.com/sql-server/sql-server-downloads">Microsoft            SQL Server</a> are supported). Since some of the PHP files are          encrypted with <a target="_blank" href="https://www.ioncube.com/">IonCube</a>,          you also need a PHP extension, the <a target="_blank" href="https://www.ioncube.com/loaders.php">Free            IonCube loader</a>.</li>        <li>If you want to use DaDaBIK on your local computer and you don't know what a Web server is or you don't know how to          install it, you can download and install an application like <a target="_blank"            href="https://www.mamp.info">MAMP</a>,          which automatically installs on your computer Apache, PHP and MySQL.                  <li>If you are building your Web application "in the cloud", your hosting          provider has probably everything you need already set up. Please          check, at least, the availability of the IonCube loaders: some hosting          providers already have it installed, some others allow you to install          it but some providers could prevent the installation of PHP          extensions.<br>          <br>          The requirements, as you can see from the next section, are low; the          vast majority of hosting services meet such requirements. <br>          We suggest, among the others, <a href="http://www.a2hosting.com?aid=dbk"            target="_blank">A2HOSTING</a>,            which offers a good shared hosting service at $6.99/mo (billed annually),          100% compatible with DaDaBIK (we tested it), with IonCube already          installed, 30-days full refund money back guarantee and four options for the location of the server: USA          (Michigan), USA (Arizona), Europe (Amsterdam) or Asia (Singapore). <br>          <br>Disclosure: we may receive commissions from the A2Hosting sales made starting from the link above, however, it's a service we tested with DaDaBIK and we highly recommend!</li>      </ul>      <li><strong>Some more details:</strong></li>      <ul>        <li>PHP</li>      </ul>      <ul>        <ul>          <li>PHP 7: any version &gt;= 7.2 is supported. PHP 8: version 8.1/8.2/8.3 are supported (version 8.0 is not).            <ul>              <li>with the mbstring extension enabled if you need to handle Multibyte character</li>              <li>with LDAP support enabled if you need LDAP authentication</li>              <li>with the ext-xmlreader extension enabled if you need to import XLS/CSV/ODS files</li>            </ul>          </li>        </ul>      </ul>      <ul>        <li>The <a target="_blank" href="https://www.ioncube.com/loaders.php">IonCube            loader</a> (version 10.1.x or higher is required if you use PHP 7, version 12 if you use PHP 8.1, version 13 for PHP 8.2, version 13.3.x for PHP 8.3).</li>        <li>MySQL or PostgreSQL or SQLite or Microsoft SQL Server :</li>      </ul>      <ul>        <ul>          <li>MySQL version &gt;= 5.0 (PDO_MYSQL PHP driver required, MariaDB is supported as well)</li>        </ul>      </ul>      <ul>        <ul>          <li>PostgreSQL version &gt;= 8.2 (PDO_PGSQL PHP driver required)</li>        </ul>      </ul>      <ul>        <ul>          <li>SQLite version &gt;= 3 (PDO_SQLITE PHP driver required)</li>        </ul>      </ul>      <ul>        <ul>          <li>MS SQL Server version &gt;= 2012 (MS SQL Server on Azure is also            OK!) (<a href="https://docs.microsoft.com/sql/connect/php/pdo-sqlsrv-driver-reference"              targer="_blank">PDO_SQLSRV</a>            PHP driver required)</li>        </ul>      </ul>      <ul>        <ul>          <li>Since we often receive questions about this: yes, a database instance on Amazon AWS or Microsoft Azure            is also fine</li>        </ul>      </ul>      <ul>        <li><!--A pre-existent database (MySQL or PostgreSQL or SQLite or MS SQL          Server) with AT LEAST ONE table: with DaDaBIK you create database          applications, not the database itself. For MySQL, a great free tool to          create databases is <a target="_blank" href="http://www.mysql.com/products/workbench/">MySQL            workbench</a><br>          If you just want to use one of the prepackaged applications provided          with DaDaBIK OR you want to build a DaDaBIK application starting from          an Excel/CSV/ODS file, you don't need any pre-existent table.<br>          <br <br="">-->          For MySQL, all the database tables must be <a href="http://en.wikipedia.org/wiki/InnoDB">InnoDB</a> (this is the default MySQL engine) if you want to correctly handle transactions; DaDaBIK can also work          with MyISAM tables but it cannot guarantee that transactions are          processed correctly and some features won't work as expected.<br>          <br>          For MySQL, running MySQL with the NO_BACKSLASH_ESCAPES SQL mode          enabled is not compatible with DaDaBIK (by default it is NOT enabled          but you can check if it is by executing: SELECT @@SQL_MODE). <br>          <br>          To prevent SQL injection vulnerabilities you have to follow these          rules:<br>          <ul>            <li>for PostgreSQL, standard_conforming_strings must be ON (if you              have a recent PostgreSQL, it should be ON by default)</li>            <li>for SQLite, the database must be in UTF8.</li>          </ul>          <p>UTF8 is the character encoding <strong>strongly recommended</strong>            also for MySQL, PostgreSQL and MS SQL Server.<br>          </p>          <p>In particular for MS SQL Server if you need to represent Unicode            characters other than ASCII, your collation must be one of the            collations ending with _utf8, introduced with SQL Server 2019 (and            available on Azure as well). nchar, nvarchar and ntext fields are            not supported by DaDaBIK: you can use them but DaDaBIK won't add the            "N" prefix to the queries so you can't represent Unicode characters            other than ASCII. Text fields are also not supported to represent            Unicode characters other than ASCII (and they are deprecated in SQL            Server anyway), you should use varchar(max) (+ _utf8 collation)            instead.</p>        </li>      </ul>      <ul>        <li>DaDaBIK works with any modern browser: Firefox, Google Chrome, Safari, Edge</li>      </ul>      <ul>        <li>Your Web server must be connected to the Internet (for serial number validation).</li>      </ul>      <p>Not sure if your system matches the requirements? Most probably it        does, but if you want to be sure before buying <a href="https://dadabik.com/index.php?function=show_contacts">contact          us</a> and we will check it for you.</p>    </ul>    <a href="#general_information">[back to top]</a>    <br><br>    <h1><a name="license"></a>3. License</h1>    <hr size="1">    <p>DaDaBIK is released under the <a href="https://dadabik.com/index.php?function=show_license">DaDaBIK        license</a> and its use requires to purchase a regular license starting      the purchase from the Website www.dadabik.com and completing it through      the reseller Fastspring.com. After having purchased a license, you can      find the text of the license in the file dadabik_license.txt. For some of      the files that compose the DaDaBIK package, you get the full source code      and you can modify it</p>    <a href="#general_information">[back to top]</a>    <br><br>    <h1><a name="video_tutorials"></a>4. Video tutorials</h1>    <hr size="1">    <p>On our YouTube channel you can find a beginner video tutorial and some      more advanced tutorials in the series "How to create a Web Application      with DaDaBIK"</p>    <p><br>      <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/videoseries?start=538&amp;list=PLyWUHBXAWIORfrKmllymIYaymgDe7-In0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>    </p>    <a href="#general_information">[back to top]</a>    <br><br>    <h1><a name="installation"></a>5. Installation &amp; upgrade</h1>    <hr size="1">    <h2> Installation</h2>    <ol>      <li>READ the <a href="#requirements">requirements</a> </li>      <li>Copy all the files contained in the <strong>program_files</strong>        folder in a directory of your choice under your Web server, e.g.        "my_dadabik_directory" </li>      <li>Open the file <strong>/include/config_custom.php</strong> with a        plain text editor and set the value of the required parameters (see        <a href="#config">here</a> for further details)</li>      <li>Run the file<strong>          http://yoursite.com/my_dadabik_directory/install.php</strong> to        install DaDaBIK</li>      <li> Have fun! :)</li>    </ol>    <p>In this tutorial (<i>installation</i> chapter), you can see a step-by-step installation of DaDaBIK.<br><br>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/aTSTzxp0_qc?start=538" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>    <h2>Upgrade from previous versions</h2>    <h3>New, official, upgrade procedure</h3>    <p>You can easily upgrade to the latest version without losing your    application's configuration if you are running at least version 5.0:    <ol>      <li>Unzip your new DaDaBIK zip package, you will find, among the other,        two files: up.php and up2.php </li>      <li>Copy those two files in the main folder of your old DaDaBIK        installation (the one you want to upgrade) </li>      <li>run the file <strong>http://yoursite.com/my_dadabik_directory/up.php</strong>        and follow the instructions. <br>        <br>      </li>    </ol>    <p>After the execution of the upgrade procedure or in case you decide to      cancel it, for security reason you have to delete the files up.php and      up2.php from your DaDaBIK folder. </p>    <p>In case you have also changed the <i>edition</i> (e.g. from DaDaBIK Pro to DaDaBIK Platinum), after the execution of the upgrade procedure you must change the serial number in config_custom.php using the new serial number you got. </p>    <p>In case you have installed a prepackaged app (Dada HelpDesk, Dada sales)      you can upgrade it using the same procedure, however only the DaDaBIK      engine will be upgraded: if the app itself has been improved you won't see      those improvements/fixes after a simple upgrade. </p>    <p>Here is a video where you can see the upgrade process in action:<br><br>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/xDJlVw-UdQk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>    <p>The one just described is the new easy upgrade procedure; below we'll      describe the old upgrade procedure, that is still available in case you      prefer it. </p>    <h3>Old upgrade procedure (in use before V 10.4 and still available if you      prefer it)</h3>    <p>You can upgrade to the latest version <span style="font-style:        italic;"></span> without losing your application's configuration if you    are running at least version 5.0:    <ul>      <li>Replace all the old files with the new ones but:</li>      <ul>        <li>keep your upload folder if you want to save the uploaded files, but          BE SURE the folder is protected, see Security section</li>        <li>custom_functions.php and custom_functions.js (and, starting from          DaDaBIK 10, all the other custom function files:          custom_required_functions.php, custom_validation_functions.php, ....):          IF you have edited the files you can keep your version; however, since          the default custom_functions.php and custom_functions.js files may          change when a new version comes out (for example, more documentation          in form of comments can be available, and this may affect your          functions), you should, instead, read the new custom_functions.php and          custom_functions.js files and then copy your custom functions in the          new files. Normally, if there are changes in the files that you should          be aware of, this is also mentioned in the changelog file.</li>        <li>keep your custom language files if you have created any</li>        <li>keep your config_custom.php file (if any, the file is available only          starting from DaDaBIK 9.3)</li>        <li>keep your styles_screen_custom.css file (if any, the file is          available only starting from DaDaBIK 9.0)</li>        <li>keep your custom PDF template files </li>        <li>if you modified any of the other DaDaBIK files (including          /templates/default_header_no_template.html and          /templates/default_footer_no_template.html) you have to re-apply the          modifications to the new files</li>      </ul>      <li>Upgrade the Wordpress plugin in the Wordpress installations where you        have used it (if any)</li>      <li>If you set your configuration parameters in config_custom.php and you        kept config.php untouched (you can do that starting from DaDaBIK 9.3),        skip to the next point; otherwise, if you edited config.php, update your        new <strong>/include/config.php</strong> file using your old        configuration settings; don't substitute the new file with the old one        but MANUALLY edit the new file according to your old configuration.</li>      <li>Run the file<strong> http://your_host/your_dir/upgrade.php</strong>        and follow the instructions to upgrade DaDaBIK</li>      <li>After having upgraded, it's a good security practice to change the        parameter $dadabik_session_name in config.php or config_custom.php (and        in the Wordpress DaDaBIK Wrapper if you use it) using a name you haven't        used in the past; this allows to make invalid all the current sessions,        that might have potentially dangerous content (think about a security        fix) or content not compatible with the new version. </li>    </ul>    <p>After the execution of the upgrade procedure or in case you decide to      cancel it, for security reason you have to delete the files install.php,      upgrade.php, upgrade2.php, up.php and up2.php from your DaDaBIK folder. </p>    <p>In case you have installed a prepackaged app (Dada HelpDesk, Dada sales)      you can upgrade it using the same procedure, however only the DaDaBIK      engine will be upgraded: if the app itself has been improved you won't see      those improvements/fixes after a simple upgrade. </p>    <p>Please note that, due to SQLite limitations, the upgrade script (both new      and old procedure) is available just for MySQL, PostgreSQL and MS SQL      Server.</p>    <ul>    </ul>    <h2> Upgrade from DaDaBIK PRO to DaDaBIK ENTERPRISE or PLATINUM (or any other edition's change) </h2>    <p>You can upgrade from DaDaBIK PRO to ENTERPRISE or PLATINUM following the      same instructions of the previous paragraph ("Upgrade from previous      version"); this also applies if the version number is the same (e.g. you      want to upgrade from DaDaBIK 11.12 Pro to DaDaBIK 11.12 ENTERPRISE). <a href="#general_information"><br>      </a></p>    <p><a href="#general_information">[back to top]</a></p>    <br>        <h1><a name="config"></a>6. The config.php and config_custom.php files</h1>    <hr size="1">    <p>The folder <strong>/include</strong> contains two important files: <strong>config.php</strong>      and <strong>config_custom.php</strong>. The config.php file contains some      parameters that DaDaBIK requires before its installation and other,      optional, configuration parameters. </p>    <p>The required parameters that you must specify are: </p>    <ul>      <li>Your serial number: $serial_number </li>      <li>Some database connection parameters: $dbms_type, $host, $db_name,        $user, $pass, $db_schema (the last one for PostgreSQL only) </li>      <li>Your Time Zone: $timezone </li>      <li>Some security parameters: $secret_key and $dadabik_session_name </li>    </ul>    <p>Starting from version 10.4, <strong>you can no longer edit the        config.php file directly</strong>, you must specify the value of all      your config parameters (required and optionals) in <strong>config_custom.php</strong>.      You can use the config.php file just as a (read-only) documentation file, where you      can see all the parameters available and their possible values.</p>    <p>For example, let's say your timezone is "Europe/Rome", you are using      MySQL on localhost, user "silvia" and password "98u$78jjh" and you want to      install DaDaBIK in the database "test_db"; this should be (at least) the content of your config_custom.php file, before installing DaDaBIK: </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      &lt;?php<br>      $serial_number = '... your serial number here ...';<br>    $dbms_type = 'mysql';<br>      $host = 'localhost';<br>      $db_name = 'test_db';<br>      $user = 'silvia';<br>      $pass = '98u$78jjh';<br>      $secret_key = '... your secret key here ...';<br>      $dadabik_session_name = '... your session name here ...';<br>      $timezone = 'Europe/Rome';</div>            <p>If you are new to DaDaBIK, we recommend to also add these two additional parameters:</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      $default_install_enable_tables_on_creation = 'yes';<br>      $grant_permissions_after_table_installation = 1;</div>    </p>        <p>... and also these two ones (they allow to create/alter/drop tables directly from DaDaBIK, so first read the security implications in config.php):</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      $enable_data_tab_operations = 1;<br>      $enable_create_view = 1;</div><br>    </p>        <p>To summarize, the easiest thing you can do is:    <ol><li>Copy the content from the three boxes above</li>    <li>Open config_custom.php  </li>    <li>Replace all its content with the content you copied at point 1.</li>    <li>Edit each of the 9 required parameters according to the instructions you have in config.php</li>    </ol>    <p>Some additional notes or common mistakes:</p>    <ul>    <li><strong>NEVER change config.php</strong>, you should only edit config_custom.php</li>    <li>Use a plain text editor (a Word processor such as MS Word can cause problems)</li>    <li>Don't change the quote characters used to delimit the parameter values e.g. $host = 'localhost' IS FINE, $host = ‘localhost’ IS NOT. In the second example we replaced the straight single quotes with opening and closing quotes.</li>    <li>If you use a DBMS different than MySQL, the required parameters you have to specify may differ from the nine mentioned above, check the config.php file for details (for example PostgreSQL needs an additional parameter).</li>    <li>config.php contains ALL the configuration parameters you can set, together with their default value, but you don't need to specify all of them in config_custom.php. In config_custom.php you need the nine required parameters + any additional parameter whose value you want to change from the default. If you are new to DaDaBIK, probably you want to install it by setting only the nine required parameters (plus the four, additional, suggested parameters), then, in case you need it, you can add additional parameters later.</li>    </ul>             <a href="#general_information">[back to top]</a>    <br><br>    <h1><a name="configuration"></a>7. How to develop a DaDaBIK application</h1>    <h1><a name="configuration_introduction"></a>7.1. Introduction </h1>    <hr size="1">    <p>After having installed DaDaBIK, you can set some very general      configuration parameters from the file <strong>/include/config.php</strong>,      just by opening it with a plain text editor and editing it. The file is      self-explanatory. At that level you can, for example configure some      DaDaBIK features (e.g. authentication, upload, email notices, language,      ...). </p>    <p>For a more analytic tuning, however, you will use the admin area ("EDIT      this app" button on the top right corner), where you can:</p>    <ul>      <li>Define your data structures (tables and views)</li>      <li>Choose the pages that compose your applications; a page in DaDaBIK        application can consist of:</li>      <ul>        <li>a set of search/insert/edit forms, results grid and reporting tools          related to a database table or a database view; DaDaBIK automatically          creates this set for each table/view you have in your database, trying          to guess the correct settings according to your schema but you can          customize it (see "Configure your datagrids" and "Configure your          forms" later)</li>        <li>a custom HTML page (you write your custom HTML code)</li>        <li>a custom PHP page (you write your custom PHP code) <strong>(DaDaBIK            Enterprise/Platinum only)</strong></li>        <li>a link to an internal or external URL</li>      </ul>      <li>Configure your data grids, choosing between a classic tabular data        grid view (default) or a custom results page completely customizable        using HTML templates.</li>      <li>Configure your forms: this is the core of a DaDaBIK application        configuration; here, for each field, you can set        <ul>          <li>if the field must be included or not in search/insert/update forms            and data grids</li>          <li>its label</li>          <li>its content (e.g. numeric, alphabetic, e-mail, url...) </li>          <li>the HTML input type (e.g. textbox, dropdown menu...) </li>          <li>the possible values, also driven from another table ("foreign key"            lookup support)</li>          <li>how the fields are arranged in each form</li>          <li>custom formatting and validation functions, calculated field            functions</li>          <li>requiredness</li>          <li>search operators</li>          <li>and more... </li>        </ul>      </li>      <li>Set the permissions (see the <a href="#permissions">Permissions</a>        sections for more details)</li>      <li>Synchronize your applications if you change the database schema from        outside DaDaBIK</li>    </ul>    <p><strong>The admin area is also self-explanatory</strong>, so you can read      most of the instructions on how to configure DaDaBIK by clicking on the      help tooltips <img alt="help tooltip" src="images/help.png"> available in      the admin area itself. <strong>That's the reason why we kept this manual        short</strong>, you will find everything you need about configuration in      the admin section. Here we will only focus on documenting a few typical      use cases:</p>    <ul>      <li>How to configure a drop-down lookup field</li>      <li>How to hide a field from a form</li>      <li>How to manage uploaded file (images and other files) fields</li>      <li>How to configure a master/details view</li>      <li>How to create a pre-filtered results grid</li>      <li>How to create graphic reports</li>      <li>How to create a completely custom page</li>      <li>What is a hook and how to add some PHP custom codes to the DaDaBIK's        workflow</li>      <li>How to use calculated fields</li>      <li>How to share the same database between two or more DaDaBIK        applications</li>    </ul>    <p>See the related following paragraphs for further details.</p>    <p>If you are configuring a DaDaBIK application that is already publicly      accessible, it's a good practice to set <strong>$maintenance_mode = 1</strong>      in config.php, in this way only administrator users can access the      application.</p>    <p>Some graphic customization can be done by changing the files <strong>/include/header.php</strong>      and <strong>/include/footer.php</strong> and by editing the CSS file <strong>/css/styles_screen.css</strong>.      In addition, the datagrid HTML templates feature allows you to deeply      customize the appearance of your item results page.</p>    <p>If you want to customize the sentences used by DaDaBIK you can create      your own custom language file, see <a href="#language">Language        translations</a> later</p>    <p> </p>    <p> </p>    <h1><a name="configuration_lookup"></a>7.2. How to configure a drop-down lookup field </h1>    <hr size="1">    <p>A lookup field is a field whose value is bound to another value in a      source data table. For example let's say you have a table <em>customers</em>      having, among the others, the fields <em>address</em> and <em>city</em>.      Instead of setting the the field city as textbox, you want to provide the      user a drop-down list which takes its values from a table <em>cities </em>having      as fields <em>ID </em>and<em> name. </em>All you have to do is setting      the following values (in the forms configurator), for the field city in      the table customers:</p>    <ul>      <li><strong>Field type:</strong> select_single</li>      <li> <strong>Lookup table name:</strong> cities</li>      <li> <strong>Lookup table primary key field:</strong> ID</li>      <li><strong>Lookup table linked fields:</strong> name</li>    </ul>    <p>Configuring the field in this way, for the field customers.city you save      in your database the ID of the city but you show to your users the name of      the city. Also, you limit the options available to the cities you have in      the table cities. The field customers.city needs to have the same database      type the field cities.ID has, so if the ID is INTEGER, customers.city      needs to be integer as well.</p>    <p>The select_single (drop-down list) is not the only DaDaBIK field      compatible with the lookup approach: you can also use radio buttons, a      list of checkboxes or a drop-down multiple select: all you have to do is      selecting the right DaDaBIK field type: instead of select_single you need,      respectively, select_single_radio, select_multiple_checkbox or      select_multiple_menu.</p>    <p>It's worth mentioning that you are not limited to one linked field, you      can add as many linked fields as you want. Let's say the table <em>cities</em>      contains also the name of the region each city belongs to: <em>cities        (ID, name, region_name)</em>; you can add <em>region_name</em> as an      additional linked field so that users will see in the drop-down menu not      only the name of the city but also the name of the relative region.</p>    <p>If the user has insert permissions on the lookup table, a + button is      displayed close to the dropdown menu, allowing the user to add a new      option to the menu without leaving the current form. If you have, in the      same form, more than one lookup field referring to the same table and you      have used the + button to add an option to one of them, the other ones are      not updated with the new option (they will be when you reload the form,      though).</p>    <p>For additional options related to lookup fields, including <strong>cascade        fields</strong>, <strong>filtered lookup</strong> and the possibility      to <strong>add a new item</strong> to a list on the fly, please refer to      the in-line helps <img src="images/help.png"> available for each      parameter in forms configurator.</p>    <p> Related videos:</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/aTSTzxp0_qc?start=2791" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>        <h1><a name="configuration_hide"></a>7.3. How to hide a field from a form </h1>    <hr size="1">    <p>Hiding a field from a form or from the results grid is very simple: let's      say you have a field <em>salary</em> in a table <em>employees</em> and      you want to show the field only to some of your users, the users belonging      to the group <em>human resources</em>. From the permissions menu of the      admin section, choose <em>employees</em> as a table and, for each group,      set the permissions: you probably want to set, for all groups except from      <em>admin</em> and <em>human resources</em>, the permissions to NO for      all the operations: RESULTS, EDIT, CREATE, DETAILS, QUICK SEARCH and      SEARCH; the effect is that DaDaBIK will never show the field, the field      will be excluded from the results grid, from the edit form, from the      "create new" form, from the details page, from the quick search form (the      boxes on the top of the results grid) and from the search form.</p>    <p>Please note that normally if you have a field which is auto-increment,      you need to hide it form the CREATE form since the value needs to be      assigned automatically from your DBMS (MySQL, PostrgreSQL, SQLite, MS SQL      Server) and not entered by the user.</p>    <p>The permissions menu is used to set the presence of fields, as explained      above, only if granular permissions are enabled (parameter      $enable_granular_permissions in config.php), which is the default      settings. If granular permissions are disabled, you can choose to hide a      field directly from the forms configurator, in this case you set the      presence of a field globally, for all the users. </p>    <p> </p>    <h1><a name="configuration_upload"></a>7.4. How to manage uploaded file (images and other files) fields </h1>    <hr size="1">    <p>DaDaBIK has two file field types: <strong>generic_file</strong> and <strong>image_file</strong>;      both the field types generate in insert/edit forms an upload control that      allows users to upload files. The difference between the generic_file and      the image_file lies in how the file is displayed in the results grid and      in the details page: for image_file fields, the actual image is displayed      (using the img html tag), for generic_file fields, a link to the file is      displayed.</p>    <p>To use the upload function you have to set <strong>$enable_uploads = 1</strong>      and set the proper <strong>$upload_directory</strong> in config.php; the      files uploaded, in fact, are not stored directly in the database but in      the file system, the database stores just a reference to the file. From      config.php you can also set the upload allowed file extensions and the      size of the image thumbnails to show in results grid and details page.      Please note that DaDaBIK automatically assigns a unique file name to the      file the user uploads, that can be different to the original one. You      should also consider that some particular characters (that have a special      meaning) in a file name can make PHP misinterprets the file name, e.g. the      filename "my\test.txt" will be seen as just "test.txt"</p>    <p>You should protect the upload directory from public access, read the      security chapter of this documentation file for further information.</p>    <p>In this video you will see, step by step, how to manage files upload in DaDaBIK.</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Re43rZJnaWE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>        Starting from V. 12.2, a new field type, <i>camera</i> works similarly to image_file but with compatible devices (typically smartphones), the device's camera opens directly when the user clicks on <i>select file</i>. A config parameter <i>camera_capture_value</i> allows to choose the front or the back camera. Note that if you have more than one "file" type field in a form and some of these (but not all) are of the "camera" type, the browser might incorrectly treat all the fields as "camera" or none of them as "camera," depending on which field it encounters first. To avoid this issue, do not include both camera file fields and non-camera file fields in the same form, or set the config parameter $upload_field_type to "classic" instead of "ajax" (default), as the classic upload does not generate this problem.    <h1><a name="configuration_masterdetails"></a>7.5. How to create a Master/Details view (subforms) </h1>    <hr size="1">    <p>A Master/Details view (also called subform) is an edit form (or a details      page) that shows not only the details of a records but also one or more      result grids displaying related records from other tables.</p>    <p>A typical example is the representation of an invoice (or an order): </p>    <p><span style="font-weight: bold;">Invoice n. 1 date 08/04/2017</span></p>    <p><span style="font-weight: bold;">Customer</span> Bob Smith</p>    <p><span style="font-weight: bold;">Description</span></p>    <p><span style="font-weight: bold;">Product&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Quantity&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp; Price</span></p>    <p>iPhone 7&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;      1&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 700</p>    <p>USB Key&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; 2&nbsp;&nbsp;&nbsp;      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;      &nbsp;&nbsp;&nbsp; 20</p>    <p><span style="font-weight: bold;">Total</span>: 740</p>    <p>You probably represent the information using two tables:</p>    <p><strong>invoices</strong></p>    <table style="width: 100%" border="0">      <tbody>        <tr bgcolor="#f0e2c1">          <td><strong>id_invoice<br>            </strong></td>          <td><strong>number_invoice<br>            </strong></td>          <td><strong>customer_invoice<br>            </strong></td>          <td><strong>date_invoice<br>            </strong></td>        </tr>        <tr>          <td>1</td>          <td>1</td>          <td>Bob Smith</td>          <td>08/04/2017</td>        </tr>      </tbody>    </table>    <p> </p>    <p><strong>invoice_items</strong><br>    </p>    <table style="width: 100%;" border="0">      <tbody>        <tr bgcolor="#f0e2c1">          <td><strong>id_invoice_item<br>            </strong> </td>          <td><strong>id_invoice<br>            </strong> </td>          <td><strong>product_invoice_item<br>            </strong> </td>          <td><strong>quantity_invoice_item<br>            </strong> </td>          <td><strong>price_invoice_item<br>            </strong></td>        </tr>        <tr>          <td>1<br>          </td>          <td>1<br>          </td>          <td style="height: 19.2px;">iPhone7<br>          </td>          <td>1<br>          </td>          <td>700</td>        </tr>        <tr>          <td>2</td>          <td>1</td>          <td>USB Key</td>          <td>2</td>          <td>20</td>        </tr>      </tbody>    </table>    <p>(you probably want to store information related to products in a third      table but let's keep the example simple)<br>    </p>    <p> The best way to represent this data in a DaDaBIK application is to      create a master/details view with invoices and invoice_items: from the      form configurator select id_invoice (the primary key of the invoices      table) and add invoice_items as master/details, selecting id_invoice as <em>foreign        key</em>:</p>    <img src="images/master_details.png"><p> You can add as many <em>details</em>    tables as you want to the same master.<br>    <p>Related video, master/details chapter :</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/aTSTzxp0_qc?start=6280" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>    <h1><a name="configuration_views"></a>7.6. How to create a pre-filtered results grid using VIEWS</h1>    <hr size="1">    <p>Sometimes you want to show to your users a pre-filtered version of your      data. Let's say for example you have a table <em>products</em> containing      a field <em>quantity_product</em>, which stores, for each product, the      quantity you have in your warehouse. If the table <em>products</em> is      installed in DaDaBIK, it can be accessed from a menu item <em>products</em>      and users can also execute search operations over it, for example, through      the search form, they can ask to see only the products having a quantity      value less than 10. If you realize that such query is quite common, you      might want to offer to your users a direct access to the products having a      quantity value less than 10, without forcing them to perform a search      operation every time. You can do this using <strong>VIEWS</strong>.</p>    <p>A database view, informally, can be defined as a "virtual table" which is      based on a real table; for example we can create a view <em>products_low_stock</em>      based on the table <em>products </em>with this simple SQL statement:</p>    <p> </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">CREATE VIEW      products_low_stock AS SELECT * FROM products where quantity_product &lt;      10</div>    <p>The view <em>products_low_stock</em> can be installed in DaDaBIK as it      was a normal table and therefore you can assign to it a menu item that      allows users to directly access the products with low stock level in one      click, without performing a search operation. Every time you access the      view products_low_stock, your DBMS implicitly execute the query "SELECT *      FROM products where quantity_product &lt; 10" and provides you with the      up-to-date results. </p>    You can create a database view directly in DaDaBIK, admin section, data tab:<br>    <br>    <img alt="create view screenshot" src="images/create_view.png"><br>    <br>    <p> For additional information about databaseviews, the Wikipedia entry is      simple and quite informative: <a target="_blank" href="https://en.wikipedia.org/wiki/View_%28SQL%29">https://en.wikipedia.org/wiki/View_(SQL)</a>.      A creative use of database views can help you in the process of creating      very complex DaDaBIK applications. </p>    <p>In this video chapter, you will learn, step by step, how to use VIEWS in DaDaBIK.  </p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HRaDLMpaZMU?start=106" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br>    <p> </p>    <h1 style="display:inline;"><a name="configuration_reports"></a>7.7. How to create graphic reports and pivot      tables<br>    </h1>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <hr size="1">    <p>Starting from the results grid of any page based on tables/views you can      create a graphic report; several chart types are available, including bar      charts, line charts, pie charts and doughnut charts.</p>    <p>DaDaBIK provides two types of reports: simple reports and advanced SQL      reports. You can create a simple report in a couple of clicks by selecting      the field you want to put on your X-axis and the field you want to put on      your Y-axis. Normally you want to aggregate data according to a field,      show each group of data on your X-axis and and show some information      related to each group on your Y-axis.</p>    <p>For example you might want to see the age composition of your customers:      in this case you would choose to aggregate data by age and to show, for      each group, the number of customers having that age (selecting the <em>count</em>      option).</p>    <p>A slightly more complicated example: you have a table <em>sales </em>containing,      among the other information, the date of the order and the amount. You      want to see your revenues, month by month. In this case you need to choose      month <em>month</em> - <em>date_order</em> for the X-axis and <em>sum -        amount</em> for the Y-axis.</p>    <p>If you need more freedom, you can use the advanced SQL reports: you can      specify your own SQL query, include a where clause, joining several tables      and so on. The only constraints you have is: the query must be a SELECT      statement where&nbsp; the first element you select will be used for the      X-axis of the graph, the second element for the Y-axis.</p>    <p>Here is an example: let's say we have the following tables:</p>    <p>sales (id_sale, date_sale, customer_sale) - each sale can have several      sale items:</p>    <p>sale_items (id_sale_item, id_sale (FK), id_product FK),      quantity_sale_item) - each sale item refers a sale and a product</p>    <p>products (id_product, desc_product, price_product)</p>    <p>we want to show, for each month, the total revenues; here is an example      of custom SQL report for MySQL:</p>    <p> </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">select      date_format(date_sale, "%b"), round(sum(quantity_sale_item*price_product))      from sales inner join sale_items on sales.id_sale = sale_items.id_sale      inner join products on sale_items.id_product = products.id_product group      by month(date_sale)</div>    <br>    <p> If you have created a report and you want to easy access it later from      the menu in one click, you can simply copy the URL you see in your browser      when the report is displayed and create a custom page (having type = link)      that points to this URL. Please note that, if the report has been      generated after a search, the search filter is not saved together with the      link. If you need to store a report based on a stable search filter, the      best way is to create a VIEW and generate the report starting from that      view. </p>    <p>What has been explained for graphic reports is also valid for pivot      tables: starting from the results grid of any page based on tables/views      you can create a pivot table where you can represent, in a tabular      fashion, your data, aggregated according to a criteria.</p>    <p> </p>    <p> </p>    <h1 style="display:inline;"><a name="configuration_pdf"></a>7.8. How to create PDF reports / documents</h1>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <hr size="1">    <h2>Introduction</h2>    <p>Starting from the <em>details page</em> or from the <em>results grid</em>      of any page based on tables/views you can create a a PDF report/document      by clicking&nbsp; the <strong>PDF</strong> button. If you are in a      details page, DaDaBIK will create a PDF document containing the      information related to the record you are viewing; if you are in the      results grid, DaDaBIK will create a PDF document containing the      information related to <em> all</em> the records included in the current      results set.</p>    <p>Please note that, in order to use this feature, the parameter      $export_to_pdf_feature needs to be set to 1 in config.php (by default, it      <em>is</em> set to 1); furthermore, the parameter $pdf_max_number_records      allows you to control the maximum&nbsp; number of records you want to      export: since the PDF export is a resource-consuming activity, if you have      a table with a huge number of records you might want to limit the export      to a specific number of records: users could launch the export on the      entire table (without filtering it) and cause a system freeze.</p>    <p>If you launch the PDF generation without selecting a template (or      selecting "No PDF template") from the template dropdown menu, DaDaBIK will      apply a standard template: for each record, a row containing the field      label (in bold) and the field value will be displayed for each field you      have in your details page or results grid.</p>    <h2>Your custom PDF template</h2>    <p>You can, however, create your own template, choosing the position of the      fields, adding graphic elements, text or any other content you might want      to add to your PDF. </p>    <p>In DaDaBIK, the generation of a PDF document is handled by the well known      <a target="_blank" href="https://tcpdf.org/">TCPDF</a> library; in      particular by using the <strong>writeHTML</strong> method (see the <a target="_blank"        href="https://tcpdf.org/docs/srcdoc/TCPDF/class-TCPDF/">documentation        of the TCPDF class</a> for additional details on the method), that      converts an HTML page to a PDF document trying to preserve the graphic      layout.</p>    <p>If you want to create a <strong>custom template</strong>, you have to      create a file having extension .html and save it in the <strong>/templates</strong>      folder: the file is just a standard HTML page that reproduces, in HTML,      the PDF document you would like to get. A DaDaBIK template has two      peculiarities respect to a normal HTML page:</p>    <ul>      <li>it always starts with the line &lt;!-- DaDaBIK Template --&gt;</li>      <li>for each of the field you want to include in the template, you can add        the value of the field by using a <em>placeholder</em>, it is something        like:<br>        dadabik_field <em>field_name</em> dadabik_field</li>    </ul>    <p>For example, let's say we have an IT Help Requests application where      users can add their help requests and we want to provide a printed version      of each request, which includes our logo, some of the fields displayed in      a tabular fashion and a signature request for the manager: here is a very      simple template that could satisfy our needs: </p>    <p> </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> &lt;!-- DaDaBIK      Template --&gt;<br>      &lt;html lang="en"&gt;<br>      &lt;head&gt;<br>      &nbsp;&nbsp;&nbsp; &lt;meta charset="utf-8" /&gt;<br>      &lt;/head&gt;<br>      <br>      &lt;body&gt;<br>      &lt;img src="images/logo.png"&gt;<br>      <br>      &lt;h1&gt;IT Help Request Form&lt;/h1&gt;<br>      <br>      &lt;table&gt;<br>      &lt;tr&gt;&lt;td&gt;ID&lt;/td&gt;&lt;td&gt;dadabik_field id_request      dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Subject&lt;/td&gt;&lt;td&gt;dadabik_field      subject_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Details&lt;/td&gt;&lt;td&gt;dadabik_field      details_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Picture&lt;/td&gt;&lt;td&gt;dadabik_field      picture_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Assigned to&lt;/td&gt;&lt;td&gt;dadabik_field      it_staff_member_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Date time&lt;/td&gt;&lt;td&gt;dadabik_field      date_time_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;I need this by &lt;/td&gt;&lt;td&gt;dadabik_field      expected_solution_date_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Created by &lt;/td&gt;&lt;td&gt;dadabik_field      created_by_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Status &lt;/td&gt;&lt;td&gt;dadabik_field      status_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;/table&gt;<br>      <br>      &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;<br>      &lt;div align="right"&gt;This form must be signed by the IT Manager for      approval&lt;/div&gt;<br>      <br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div align="right"&gt;Manager's Signature&lt;/div&gt;<br>      &lt;div align="right"&gt;____________________&lt;/div&gt;<br>      <br>      &lt;/body&gt;<br>      &lt;/html&gt; </div>    <p>A template can be much more sophisticated and it can include (internal)      CSS as well.&nbsp;While the final result is not guaranteed (some HTML tags      or CSS attributes might be not supported by TCPDF), the TCPDF library      tries to preserve your HTML layout as much as possible and does a very      good job.</p>    <p>Once you have created your template and saved in the /templates folder,      the template name (the part of the filename before .html) will appear as      an option to choose in the template dropdown menu.</p>    <p>Please note that, if you are producing a PDF document starting from a      master / details view, only the master part of the view is converted in      PDF.</p>    <p>If one of the fields you use in your template has content type: HTML or      field type: rich editor, you can experience unpredictable results in the      PDF produced. TCPDF might in fact misunderstand some characters, such as      &lt; or &gt;, considering them as part of a tag; for all the other field      types/contents DaDaBIK converts those characters in the corresponding HTML      entities so you won't experience such problem.</p>    <h2>"Mail Merge" feature</h2>    <p>The export to PDF feature applied to a record results set, in combination      with the use of custom templates, guarantees results similar to the ones      you can get using a typical "Mail Merge" feature available in Word      Processors. Let's say for example that you want to send a (paper) mail to      all your customers who live in a particular city: you can do it by      searching the customers by city and export as PDF the results set, using a      template that contains the letter and a name placeholder that will be      automatically filled with the name of each of the customer.</p>    <h2>Advanced PDF customization</h2>    <p> There are still a few things you can do to customize your PDF reports /      documents.</p>    <p> </p>    <a name="pdf_templates_php"></a>    <h3>Templates in PHP</h3>    <p>Instead of using <i>just</i> HTML, you can also use some PHP in your      templates. Adding PHP code to your templates opens to many new      possibilities, for example part of your template can change according to      some conditions (e.g. according to the user currently logged in).<br>      <br>      Here is an example of template with some PHP code. The first piece of code      just adds the current date to the PDF, the second one adds a whole part of      the template ONLY if the current logged user is part of the group having      ID 2. </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> &lt;!-- DaDaBIK      Template --&gt;<br>      &lt;html lang="en"&gt;<br>      &lt;head&gt;<br>      &nbsp;&nbsp;&nbsp; &lt;meta charset="utf-8" /&gt;<br>      &lt;/head&gt;<br>      <br>      &lt;body&gt;<br>      &lt;img src="images/logo.png"&gt;<br>      <br>      &lt;h1&gt;IT Help Request Form&lt;/h1&gt;<br>      <br>      <strong>&lt;?php echo 'Date: '.date('Y-m-d'); ?&gt;&lt;br&gt;<br>      </strong> &lt;table&gt;<br>      &lt;tr&gt;&lt;td&gt;ID&lt;/td&gt;&lt;td&gt;dadabik_field id_request      dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Subject&lt;/td&gt;&lt;td&gt;dadabik_field      subject_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Details&lt;/td&gt;&lt;td&gt;dadabik_field      details_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Picture&lt;/td&gt;&lt;td&gt;dadabik_field      picture_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Assigned to&lt;/td&gt;&lt;td&gt;dadabik_field      it_staff_member_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Date time&lt;/td&gt;&lt;td&gt;dadabik_field      date_time_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;I need this by &lt;/td&gt;&lt;td&gt;dadabik_field      expected_solution_date_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      &lt;tr&gt;&lt;td&gt;Created by &lt;/td&gt;&lt;td&gt;dadabik_field      created_by_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      <br>      <strong>&lt;?php if ($current_id_group == 2){ ?&gt;<br>      </strong> &lt;tr&gt;&lt;td&gt;Status &lt;/td&gt;&lt;td&gt;dadabik_field      status_request dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      <strong>&lt;?php } ?&gt;<br>      </strong> <br>      &lt;/table&gt;<br>      <br>      &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;<br>      &lt;div align="right"&gt;This form must be signed by the IT Manager for      approval&lt;/div&gt;<br>      <br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div align="right"&gt;Manager's Signature&lt;/div&gt;<br>      &lt;div align="right"&gt;____________________&lt;/div&gt;<br>      <br>      &lt;/body&gt;<br>      &lt;/html&gt; </div>    <p>If you need PHP templates, remember to save your template file with a      .php extension. If DaDaBIK finds in the templates folder two templates      having the same name and different extensions (one with .html extension,      the other with .php extension), the HTML template will be used.</p>          <p>If you need to display content without using <i>dadabik_field</i> pairs (e.g. you want to display the content of a $myvar variable) and you don't want your content to be interpreted as HTML (probably, in most of the cases, you don't), you must pass your content through <i>htmlspecialchars</i> (e.g. echo htmlspecialchars($myvar)), otherwise you could have unexpected results: if for example you have a < sign in your content, TCPDF might interpret it as HTML and silently stop the rendering of the page because of a rendering error, giving you the false impression that, for example, some fields are not available or the records related to a search are less than they actually are.    <h3>Customize the default template</h3>    <p> As we mentioned earlier, if you don't choose a template from the      dropdown menu, DaDaBIK will use a default standard template; you can      change the default header and footer of that template by editing the files      <strong>default_header_no_template.html</strong> and <strong>default_footer_no_template.html</strong>      (/templates folder): this allows, for example, to modify the CSS used by      the default template. </p>    <h3>Additional customization, the _settings.php template</h3>    <p> As we mention earlier, for each custom template you have to create a <em>TemplateName.html</em>      (or <em>TemplateName.php</em>) file in the /templates folder. In      addition, you can create an (optional) <em>TemplateName_settings.php</em>      file that might contain the following items:</p>    <p> </p>    <ul>      <li>the set_standard_pdf_parameters_custom() function </li>      <li>the pdf_custom_code_after_addpage() function</li>      <li>the MYPDF class, that extends the TCPDF class</li>      <li>template-specific settings for PDF parameters you have in config.php</li>    </ul>    <p>The <strong>set_standard_pdf_parameters_custom() </strong>function      overrides the <strong>set_standard_pdf_parameters() </strong>function,      that DaDaBIK calls after the creation of a TCPDF object; in such function,      some general characteristics of the document are set, for example margins      and font (see set_standard_pdf_parameters() in /include/pdf_functions.php      for details).</p>    <p>The <strong>pdf_custom_code_after_addpage()</strong> function is an      optional function executed by DaDaBIK after the execution of the AddPage()      method of the TCPDF class. In the following example the function adds a      custom logo in the top left corner (coordinates 10,10), after the      execution of AddPage():</p>    <p> </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> function      pdf_custom_code_after_addpage($pdf){<br>      &nbsp;&nbsp;&nbsp; $pdf-&gt;Image('images/mylogo.png', 10, 10);<br>      }</div>    <p>The <strong>MYPDF class</strong> allows to customize even more a      template, overriding some of the methods of the TCPDF class, for example      the Header() and Footer() methods. In the following example the class      overrides the Footer method, displaying - for the footer of <strong>every</strong>      PDF page produced - a custom text in a 40x10 cell: </p>    <p> </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> class MYPDF      extends TCPDF {<br>      <p> &nbsp;&nbsp;&nbsp; public function Footer() {</p>      <p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... your additional code        here ...</p>      <p> </p>      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;Cell(40, 10, 'My        footer text ');</p>      <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... your additional code        here ...</p>      <p> &nbsp;&nbsp;&nbsp; }<br>        } </p>    </div>    <p> </p>    <p><span style="font-weight: bold;"><br>      </span>Finally you can set here the config.php PDF parameters when you      need to override the corresponding config.php value; for example let's say      that you normally need <em>portrait</em> orientation, so you have      $pdf_page_orientation = 'P' in config.php; for one or more templates,      however, you might need <em>landscape</em> orientation, in this case you      can simply set $pdf_page_orientation = 'L'; in the related _settings.php      template file.</p>    <p>You can even override <strong>$export_to_pdf_feature</strong>, for example    because you want to <strong>enable the PDF export ONLY for one or some      tables/views</strong>: in this case you can keep $export_to_pdf_feature =    0 in config.php and set $export_to_pdf_feature = 1 in your _settings.php    template files. DaDaBIK won't create the standard "produce PDF" button if    $export_to_pdf_feature = 0 but you can easily create a custom "CREATE PDF"    button for the tables/views you need, a button that just redirects to    something like:index.php?tablename=YOURTABLE&amp;function=search&amp;export_to_pdf=1&amp;pdf_template=YOURTEMPLATE<br>    Please note that to make this work you also need to set    $parse_pdf_php_template_even_if_export_pdf_disable = 1 in config.php,    otherwise DaDaBIK won't read your _settings.php template file.<br>    <p>The name of the PDF file produced is also something you can set in this      file, using the variable $pdf_file_name e.g.: </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      <p>$pdf_file_name = 'customers'; </p>    </div>    <p>If you don't specify a name, the default one (the name of the      corresponding table) will be used.</p>    <h3>Produce a PDF with tabular data </h3>    <p>You might need to produce a PDF representing some tabular data, for      example a list of products, where <strong>each product</strong> is      represented as <strong>a row</strong> of the table. If you try to create      a custom HTML template for this, you will fail: you can create the <strong>products.html</strong>      template for the row, something like :</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> <br>      &lt;!-- DaDaBIK Template --&gt;<br>      &lt;tr&gt;&lt;td&gt;dadabik_field name_product      dadabik_field&lt;/td&gt;&lt;td&gt;dadabik_field price_product      dadabik_field&lt;/td&gt;&lt;/tr&gt;<br>      <br>    </div>    <p>but you miss the starting and closing tag of the table. In these cases,      when you need a template for each record and two additional templates that      work as header and footer, you need to create three HTML templates; if you      have a products.html template, you will also need a products_header.html      and a products_footer.html template.</p>    <p> Here is the content of these two additional templates, <strong>product_header.html</strong></p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> &lt;!-- DaDaBIK      Template --&gt;<br>      &lt;html lang="en"&gt;<br>      &lt;head&gt;<br>      &nbsp;&nbsp;&nbsp; &lt;meta charset="utf-8" /&gt;<br>      &lt;/head&gt;<br>      <br>      &lt;body&gt;<br>      <br>      &lt;h1&gt;Products list&lt;/h1&gt;<br>      <br>      &lt;table&gt;<br>      &lt;thead&gt;<br>      &lt;tr&gt;&lt;th&gt;Name product&lt;/th&gt;&lt;th&gt;Price      product&lt;/th&gt;&lt;/tr&gt;<br>      &lt;/thead&gt;<br>      &lt;tbody&gt;<br>    </div>    <br>    and <strong>products_footer.html</strong><br>    <br>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> &lt;!-- DaDaBIK      Template --&gt;<br>      &lt;/tbody&gt;<br>      &lt;/table&gt;<br>      &lt;/body&gt;<br>      &lt;/html&gt;&nbsp;</div>    <p>If DaDaBIK sees that, for a custom template, the correspondent _header      and _footer template files exist, it will use them. </p>    <p>In order for this to work, however, you also need to set      $add_pdf_page_for_each_record = 0 in config.php. Why? Because by default,      DaDaBIK create a new PDF page for each record, but this is not what you      want if you need to produce tabular data. What if you need this behaviour      only for some templates? You can just leave $add_pdf_page_for_each_record      = 1 in config.php and set $add_pdf_page_for_each_record = 0 in the      specific _settings.php template file where you need it, in this case in      the products_settings.php template file.</p>      <p>Please note that according to our tests, the TCPDF library in some cases my have problems in handling grids that split across pages, resulting in missing content and/or producing documents that according to Adobe Acrobat Reader are "malformed". It seems to be related to the presence of images, but we were unable to identify when exactly the problem arises. Carefully test PDF tabular data before using it and use at your own risk.</p>    <h2>PDF and UTF-8 characters</h2>    <p> </p>    <p>In case you experience problems with some UTF-8 characters which are not      displayed correctly in PDF, you can fix the problems by using a font that      is able to display <strong>all</strong> the UTF-8 characters (the core      TCPDF font used by default is not), for example freesans. You can find      some instructions here: <a target="_blank" href="https://dadabik.com/forum/read.php?1,19987">https://dadabik.com/forum/read.php?1,19987</a></p>    <h2>Additional information about PDF generation</h2>    <p>For additional information about TCPDF, please refer to <a target="_blank"        href="https://tcpdf.org/docs/">its        documentation</a>. </p>    <p> </p>    <h1><a name="configuration_same_db_two_apps"></a>7.9. How to share the same database between two or more DaDaBIK      applications</h1>    <hr size="1">    <p>Sometimes you want to build two (or more) different DaDaBIK applications      which work on the same data (i.e. on the same database).</p>    <p>For example you want to build:</p>    <ol>      <li>A backend/data-entry application, from which you modify/enter data,        accessible only to some people and</li>      <li>A simpler, read-only, publicly available application that users can        access without logging in.</li>    </ol>    <p> You can do it very easily following these simple rules: </p>    <ul>      <li>the database name (parameter $db_name) must be the same in all the        config.php files</li>      <li>the $prefix_internal_table parameter needs to be different and UNIQUE        for each application</li>      <li>use the $prefixes_to_exclude parameter to state, for each application,        the prefixes (see previous rule) you have used in the other applications        sharing the same database.</li>    </ul>    <p>For example, if we have two applications sharing the same database, here      is an example of config.php files</p>    <p><strong>config.php application A</strong></p>    <p>$db_name = 'my_database';<br>      $prefix_internal_table = 'dadabik_1_';<br>      $prefixes_to_exclude[0]='dadabik_2_';</p>    <p><strong>config.php application B<br>      </strong></p>    <p>$db_name = 'my_database';<br>      $prefix_internal_table = 'dadabik_2_';<br>      $prefixes_to_exclude[0]='dadabik_1_';</p>    <p>If you just want to make part of your application public, you should use      the parameter $username_public_user (see the Authentication chapter for      further details).</p>    <p> </p>    <h1><a name="authentication"></a>8. Authentication</h1>    <hr size="1">    <h2><a name="authentication_standard"></a>8.1 Standard Authentication</h2>    <p>Authentication is enabled by default, which means that, in order to use      an application created with DaDaBIK, you have to login. You can disable      authentication by setting $enable_authentication = 0 in <strong>/include/config.php</strong>;      while this is not recommended, it can be useful if you want to use DaDaBIK      to create a public Web site.</p>    <p>DaDaBIK is released with the following default users: </p>    <ul>      <li>root (this is a user belonging to the        admin group)</li>      <li>alfonso (this is a user belonging to the        normal group)</li>    </ul>    <p>Admin users can not only use a DaDaBIK application but also configure it      through the admin area; furthermore, they can add new users/groups and      edit/delete existing ones.</p>    <p>If you want make part of your DaDaBIK application public and part      private, for example you want to allow unathenticated users to read a      public dataset or you want to open to the public a registration form or a      contact form, you can still set $enable_authentication = 1 and then define      who is the "public" user in config.php (parameter $username_public_user):      unathenticated users will be granted with the permissions you assign to      the group the public user belongs to.</p>    <p> <a href="#general_information">[back to top]</a> </p>    <h2><a name="authentication_ldap"></a>8.2 LDAP Authentication</h2>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <hr size="1">    <p>Optionally, you can authenticate your users against an LDAP server.      DaDaBIK has been tested with both Open LDAP and Microsoft Active      Directory.</p>    <p>From <i>/include/config.php</i> you have to enable $ldap_authentication      and specify all the parameters required for the connection. Users who      authenticate using LDAP are then copied into the DaDaBIK users table and      get assigned to a default (configurable) group. The aim of the copy is to      allow the permissions setting, LDAP users authentication is always      performed through the LDAP server.</p>    <p>Mixed authentication (some users authenticate against DaDaBIK, others      against an LDAP server) is also possible: during the log-in procedure, a      user can check/uncheck the LDAP checkbox in order to specify if he is      going to authenticate through LDAP or not.</p>    <p> <a href="#general_information">[back to top]</a> </p>    <h2><a name="authentication_wp"></a>8.3 Wordpress Authentication</h2>    <hr size="1">    <p>If DaDaBIK is integrated into a Wordpress site, users authenticated      through Wordpress can also be (optionally) automatically authenticated      into DaDaBIK too, without doing the log-in again. See <a href="#dadabik_wordpress_integration">DaDaBIK        Wordpress Integration</a> for further details.</p>        <p> <a href="#general_information">[back to top]</a> </p>    <h2><a name="2fa"></a>8.4 Two-Factor Authentication</h2>    <hr size="1">    <p>Admins can enable, individually for each user, Two-Factor authentication (by default it's disabled). If enabled, after email+password check, users need to provide a  verification code generated by Google Authenticator or any other app compatible with the TOTP algorithm.<br>        Before starting to use 2FA, you need to set the config parameters $encryption_key and $two_factor_auth_app_name.<br>        If you use <a href="#api">HTTP API</a> calls to login, you can still authenticate with uesrname+password only, even if 2FA is enabled for the user.<br>If you use Wordpress to login, the WP authentication is enough to login, even if 2FA is enabled for the user.</p>    <a href="#general_information">[back to top]</a>    <br><br>    <h1><a name="permissions"></a>9. Permissions</h1>    <hr size="1">    <h2>Basic permissions</h2>    <p>For each table (each form and field), through the permissions manager (EDIT this App -> Permissions),      you can set which operations (Read, Create, Edit, Delete and Details) are      allowed.</p>    <p>If you disable the read permission for a table, the related item won't be      displayed in the menu of the application. Remember, however, that users      can still read its records if the table is used as source of a      select_single/select_multiple field or as items table in a master/details      view.</p>    <h2>Granular permissions:</h2>    <p>If <strong>$enable_granular_permissions</strong> is set to 1 (this is      the default settings) in <strong>/include/config.php</strong> you can      set, through the permissions manager, which operations (Read, Create,      Edit, Delete and Details) are allowed for each users group on each form      and field.</p>    <p>For example you can configure your application to allow the group      "Managers" to read and modify all the forms while the group "Employees" to      read all the forms and modify just some of them, or just some fields of      them.</p>    <p>As we said for the basic permissions, if you disable the read permission      for a table, the related item won't be displayed in the menu of the      application. Remember, however, that users can still read its records if      the table is used as source of a select_single/select_multiple field or as      items table in a master/details view.</p>          <h2>Permissions Templates</h2>    <p><strong>(DaDaBIK Enterprise/Platinum only)</strong>    <p>As explained in the previous chapter, through the permissions manager you can set your granular permissions for each group / table / field combination. Especially if you are dealing with a complex application having many user groups,  setting the permissions manually can be time consuming; if this is the case, you can save time setting Permissions Templates in your config_custom file.    <p>More specifically, you can add a set of permissions you want to grant, automatically, when you add a new table or a new field to your application.</p>        <p>Let's see an example, let's say you have three groups: admin, managers, employees (IDs 1,2,3) and when you install a new table or add a new field you want to assign all the permissions to the admin group, all the permissions except delete to the managers group and only read permissions to employees group.<br>You can define a template for that, using a <strong>sequence of 6 numbers</strong> representing the table permissions (READ DELETE EDIT CREATE DETAILS CSV) and a <strong>sequence of 7 numbers</strong> representing the field permissions (RESULTS	EDIT	CREATE	DETAILS	QUICK-SEARCH	ADVANCED-SEARCH	CSV), where, for each number:<br><br>    0 means NO<br>    1 means YES<br>    2 means MY  (only valid for read, delete, edit, csv permissions on tables)<br>    3 means YES, but disabled (only valid for edit permissions on fields)<br>        <p>Following the example above:<br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">            // group 1<br>    $permissions_template['table_default'][1] = '111111'; // all the table permissions set to "1", means YES<br>    $permissions_template['field_default'][1] = '1111111'; // all the field permissions set to "1", means YES<br><br>        // group 2<br>    $permissions_template['table_default'][2] = '101111'; // all the table permissions set to "1" except from the second (delete)<br>    $permissions_template['field_default'][2] = '1111111'; // all the field permissions set to "1"<br><br>        // group 3<br>    $permissions_template['table_default'][3] = '100010'; // only read and details table permissions<br>    $permissions_template['field_default'][3] = '1001010'; // only read, details and advanced search field permissions <br>    </div>    <p>Every time you add a new table or a new filed, these rules will be used by DaDaBIK to automatically set (granular) permissions.        <p>You can also set specific templates for <strong>specific tables</strong>, overriding the general rules if there is an overlap, e.g. let's say you want to follow a different rule only for the field you will add to the  table "customers" and only for group 2 the edit must be disabled; this is the template rule you should add:        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">           $permissions_template['field']['customers'][2] = '1011111'; // all the field permissions set to "1" except from edit    </div>        <p>Also the table permissions can be table specific, so for example:        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">           $permissions_template['table']['products'][1] = '100000';<br>    </div><br><br>        will assign, to the group 1, only read permissions  for the table <em>products</em>, if and when a table <em>products</em> will be installed.        <p>Permissions templates are integrated and complementar to the config parameter $grant_permissions_after_table_installation. If this parameter is set to 1 (the default is 0), all the permissions are set to YES for all the groups when you install a table (and, only starting from V 11.6, also when you add a field); if it is set to 2, all the permissions are set to YES, but only for the admin group.<br><br>    If you define permissions templates, the rules in your templates overrides the behaviour prescribed by $grant_permissions_after_table_installation but if, for one or more tables/groups, you didn't set any rule, then for those tables/groups $grant_permissions_after_table_installation will be used.<br><br>    Finally, the config parameter $grant_permissions_autoincrement_after_table_installation (see config.php for details) is also considered: if it is set to 0 (default is 1)  and you are using MySQL (at the moment this parameter only works with MySQL) the permissions for an auto-increment field will be set to NO, regardless of your rules.</p>                    <h2 style="display:inline;">Integration with existing user and group lists</h2>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <p>DaDaBIK uses by default the <i>dadabik_users</i> and <i>dadabik_groups</i> tables to      store users information, but you can also use existing user and group      tables. This help the integration of DaDaBIK with existing applications.</p>    <p>To use your own users and groups tables, you have to      configure the config parameters whose name starts with $users_table_ and $groups_table_; the integration is also possible if your users table doesn't use the same password encryption that DaDaBIK      uses, in this case you have to customize the hashing functions as      explained in <strong>/include/config.php</strong></p>      <p>If you set your own users and groups tables and tell DaDaBIK the names of the fields to use for authentication (username, password, ... ), DaDaBIK will read users and groups from those tables when it needs it (authentication, permissions setting, ...); however you shouldn't manage (add, edit) users and group FROM DaDaBIK: there are additional fields, not useful for authentication/permissions (e.g. first name, last name, ...) that are available in the DaDaBIK standard users table and unless your custom tables don't have exactly the same fields, if you add/edit users from DaDaBIK you can generate errors and unexpected behaviour.</p>    <h2 style="display:inline;">Owner permissions:</h2>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <p>An owner permissions model is also available, it allows to set-up the      application in a way such as users can: </p>    <ul>      <li>Delete only their own records</li>      <li>Modify only their own records</li>      <li>View only their own records</li>    </ul>    The owner of a record is the user who inserted it.    <p>You can enable this feature from the permissions manager; to enable it,      authentication must be enabled and each table you want to protect must      have a field whose DaDaBIK field type is set to ID_user. When a field is      set to ID_user, the username of the current user will be automatically      inserted by DaDaBIK into this field when you insert a new record. If you      want to base the ownership on the group instead of the user, change      $use_id_group_for_ownership in <strong>/include/config.php</strong></p>    <p> Please note that you can enable the <i>owner permissions</i> also for      VIEWS, but also for VIEWS (as for TABLES) you need a working ID_user      field, VIEWS don't automatically inherit form settings from the underlying      tables. In some cases, however, you cannot directly insert records into a      view (the DBMS won't allow you to do it, to read some more details related      to MySQL see <a target="_blank" href="https://dev.mysql.com/doc/refman/5.7/en/view-updatability.html">https://dev.mysql.com/doc/refman/5.7/en/view-updatability.html</a>)      so the correct ID_user value must come from the underlying tables. </p>                              <h2 style="display:inline;">Permissions based on multiple groups</h2>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <p>If granular permissions are enabled (by default they are), for each user group you can set table, fields and custom pages permissions. The permissions of each user, therefore, are based on the permissions you granted to the group the user belongs to. Until V 11.6, a user could belong to one group only. Starting from V 11.7, each user has a required (main) group and one or more optional groups they belong as well. If $enable_multiple_groups_permissions is set to 1 (by default it is), the user permissions are computed taking into consideration all the groups the user belongs to (main + others) and, in case they are different, using a "most permissive" strategy.</p>        <p>This means that if group "Managers" has read and delete permissions on table customers and group "Directors" has read and edit permissions on table customers, the user "Alice" belonging to both "Directors" and "Mangers" will have Read, Delete and Edit permissions on table customers. The same for fields and pages permissions. For example if group Directors has create permissions on field customers.firstname but not on customers.lastname and, viceversa, group Managers has create permissions on field customers.lasetname but not on customers.firstname, Alice will have create permissions on both fields. You can check the resulting permissions for each user in the new Permissions -> Show user Permissions page.</p>        <p>It's important to point out that the resulting field permissions don't take into consideration table permissions. For example let's say that group "Managers" has edit (table-level) permissions on table customers and group "Directors" has not. Field-level, Managers has edit permissions on fields firstname and lastname but not on field phone_number, while Directors has edit permission only on phone_number (even if it hasn't edit permission on table level, which is an odd situation but it is possible). If Alice belongs to Directors group only, she won't get edit permissions on customers, however if she belongs to Managers group as well, she will get edit permissions on table customers, on firstname, lastname AND phone_number as well. </p>        <p>For the admin group (by default the group having id_group 1) you can assign table/field/pages permission as for the other groups but in addition the members can also edit the application and read/insert/edit/delete other users/groups. A user gets these additional permissions only if their <em>main group</em> is the admin group, if you add the admin group as additional group, only table, field and pages permissions will be inherited.</p>                            <a href="#general_information">[back to top]</a><br><br>    <h1><a name="low_coding"></a>10. How to add your custom code to DaDaBIK      (low-coding)</h1>    <hr size="1">    <p>Almost all the features we have seen so far don't require any coding      (no-code), and in fact you can build an entire Web application without any      coding. However in some cases you might want to enrich your application by      adding your own PHP/HTML/Javascript code. That's what we call low-code:      you don't have to code your application from scratch, you can build most      of the application without coding, using the form configurator, the      permissions manager and the other tools provided by DaDaBIK and then you      add your code to implement some peculiar aspect of your application. </p>    <p>In DaDaBIK you can inject your code in several different ways, for      example through custom pages, custom buttons, hooks, calculated fields,      custom validation functions and others. In the following chapters we'll      cover each of them. Here, we'll see just some general guidelines you      should use when you add custom PHP code. If you are new to DaDaBIK, it's      probably better to read the next chapters first (calculated fields, custom      validation functions, ... ) and get a little familiar and then come back      here later. </p>    <h2>Which coding style should I use?</h2>    <p>Feel free to use the style you prefer, you should think about DaDaBIK as      a framework that provides you, as a black box, some pre-built typical      components; you build on the top of those components. </p>    <p>An important note related to spaces and tabs, though: when you define a      custom function, don't add spaces or tabs in front of the definition: </p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function      print_customer_details(<br>      is OK!<br>      <br>      <br>      &nbsp;&nbsp; &nbsp;function print_customer_details(<br>      is not OK, the form configurator parser can't read it correctly.<br>    </div>    <h2>Global variables</h2>    <p>DaDaBIK provides a few global variables that you can use in your own      custom code: </p>    <ul>      <li>$conn: the PDO connection to the database </li>      <li>$current_user: the username of the currently logged user </li>      <li>$current_id_group: the id of the group the logged user belongs to </li>      <li>$current_user_is_administrator (0|1): if the currently logged user        belongs to the administrators group (1) or not (0) </li>      <li>$quote: the correct quote character to use for table and field names        in your queries. </li>    </ul>    <p>In case the authentication is disabled, $current_user and $current_id_group    are set to 'nobody' and $current_user_is_administrator to 0.    <h2>$_POST $_GET and $_COOKIE variables</h2>    <p>You might need to use $_POST $_GET and $_COOKIE variables in your custom      code. DaDaBIK automatically escapes all the values coming from $_POST      $_GET and $_COOKIE (e.g. on MySQL "tes't" will become "tes\'t"), please      consider that when you use those variables in your custom code. For      databaes queries, in particular, if you use prepared statements (and you      should), you should unescape those values (using the DaDaBIK function      unescape() ) before using them in your bind_param_db functions. Don't use      unescape() on values that have not been escaped. </p>    <p>For historical reasons, however, in custom PHP pages, $_POST, $_GET and      $_COOKIES are not automatically "escaped" for your queries (so a string      POSTed as "tes't" will remain "tes't", regardless of your magic_quotes_gpc      settings), we suggest to use prepared statements which don't require      explicit escaping for field values. </p>    <p>So, just to summarize: in custom pages "tes't" coming from $_POST, $_GET      or $_COOKIES will remain "tes't"; in all the other cases (custom      validation functions, custom formatting functions, calculated fields, ...)      the quote (') will be automatically escaped. This is happening regardless      of your magic_quotes_gpc settings. Please note that the automatic escape      we are talking about here impacts on your code if you directly use the      $_POST $_GET and $_COOKIE variables, if you use the parameters provided to      your functions by DaDaBIK (see $params later), the value you get is      exactly the one the user inserted. </p>    <h2>Queries execution</h2>    <p>We suggest to use the $conn PDO connection mentioned before and to use <i>prepared        statements</i>. </p>    <p>In your queries, each field and table name must be surrounded by quotes      (e.g. SELECT * FROM <strong>`customers`</strong>); you can use the global      $quote variable, which contains the correct quote character according to      your DBMS. </p>    <h2>Queries and records locking</h2>    <p>When a user enters a record in edit mode, DaDaBIK "locks" the record so      that other users cannot modify it using the DaDaBIK edit feature and when the user clicks on "SAVE", DaDaBIK checks if the lock is still available (in fact after a certain amount of time the lock is releases). This      prevents conflicts and data loss. However, if, with your custom queries,      you modify a record, there isn't any check related to locking, consider      that when you create your custom code. At the moment the only case case where you can easily check the lock status before modifying data with your custom code is a button in the edit form: check, in the custom buttons chapter, the <i>dadabik_change_status</i> function to see an example. We will provide in the future other tools that you can use in your custom code to check the lock status of a record and to check if someone changed a record since the last time the current user saw it. </p>          <h2>Queries and permissions</h2>    <p>When you execute SQL in your custom code (even when Custom Code API is used, see later), permissions are not checked: e.g. if user <em>Anna</em> doesn't have delete permissions on table <em>customers</em>, she can't delete records form the application interface (she doesn't even see the delete button), however, if you delete a record from <em>customers</em> using custom code, the record is deleted even if <em>Anna</em> is logged.</p>          <h2>ONLY function definitions</h2>    <p>As you will learn in the next few paragraphs, you can add your own custom functions in custom_functions.php and in all the files contained in the custom_functions folder. For security reasons, it's important that you write there only function definitions. If you write additional code, external to your functions, such code could be executed by an attacker by directing calling the files. This is true for any DaDaBIK file you want to modify adding your code, except from the files you use to build custom PHP pages, for those files, if you edited them following the instructions, DaDaBIK checks if the script is being executed directly, outside DaDaBIK, and in case it stops the execution.</p>        <h2>Custom Code API</h2>        <p>To make your custom code leaner and more secure, you should use, when fits your needs, the Custom Code API. At the moment the API consists of seve methods: <em>get_record_details()</em>, <em>update_records()</em>, <em>insert_record</em>, <em>count_records()</em>, <em>delete_records()</em>, <em>load_table_page()</em>, <em>load_custom_page()</em>. The functions are static methods of the <em>ddb_api</em> class, therefore you must call them using this syntax:        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">ddb_api::function_name(function parameters)</div>        <p><h3>get_record_details($table_name, $id_field, $id_value)</h3>        <p>In one code line you can get the field values of a record belonging to any of the tables you have in your database, without directly executing SQL queries. Let's say that in one of your custom functions you need first and last name of the customer having ID 2; instead of executing an SQL query, you do:        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      $customer_info = ddb_api::get_record_details('customers', 'id', 2);</div>          <p>Where the first parameter is the table name, the second the name of a unique field and the third the value of such field. You will get an associative array containing the value of all the fields, so for example you'll find first and last name in $customer_info['first_name'] and $customer_info['last_name']. In case more than one record matches your query (this should never happen if you use a unique field) an error is triggered.<br><br>Please note that a preliminary version of get_record_details() was released with DaDaBIK V 11.7, it was not a method of the ddb_api class and therefore you could use it by simply calling get_record_details(); to guarantee backward compatibility, only for this API method, it is still possible to use it that way.        <p><h3>update_records($table_name, $field_name, $field_value, $fields_to_update_ar, $fields_to_update_values_ar)</h3>        <p>Update one or more records of the table $table_name (matching a $field_name / $field_value pair) assigning new values (array $fields_to_update_values_ar) to one or more fields (array $fields_to_update_ar). In the following example, we update the record having <em>id_customer</em> 10 in the table <em>customers</em>, assigning '2299 Piedmont Ave.' and 'Berkeley' to the fields <em>address_customer</em> and  <em>city_customer</em>, respectively.        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      ddb_api::update_records('customers', 'id_customer', 10, ['address_customer', 'city_customer'], ['2299 Piedmont Ave.', 'Berkeley']);</div>          <p>Since id_customer is a unique field here, you will update max one record, if your condition matches more than one record, you will update all the matching records.        <p>When you call update_records():    <ul>    <li> If SQL logging is enabled, your UPDATE query will be logged.</li>    <li> If revisions are enabled for the table, the records updated will be tracked by revisions, however if there are concurrent insert/update/delete operations on the same table, it may happen that DaDaBIK doesn't correctly registered in revisions, as updated records, all and only the records actually updated. If you want to avoid this issue, you should set your DBMS transaction isolation level to: Serializable. Furthermore, revisions are correctly tracked only if the update_records operation does not change the value of the unique field of the table.</li>    <li>Update HOOKS are not executed.</li>    <li>Automatic email notices ($enable_update_notice_email_sending = 1) are not sent.</li>    <li>Data validation is not executed (e.g. if, for a field set as "email" in form configurator, you provide a non-valid email, the update operation will be executed anyway).</li>    </ul>        <p><h3>insert_record($table_name, $fields_to_insert_ar, $fields_to_insert_values_ar)</h3>        <p>Insert a record in the table $table_name assigning values (array $fields_to_insert_values_ar) to one or more fields (array $fields_to_insert_ar). In the following example, we insert a record in the table superheroes, assigning 'Spider-Man' and 'Peter Parker' to the fields <em>name_superhero</em> and  <em>secret_identity_superhero</em>, respectively.        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      ddb_api::insert_record('superheroes', ['name_superhero', 'secret_identity_superhero'], ['Spider-Man', 'Peter Parker']);</div>          <p>When you call insert_record():    <ul>    <li> If SQL logging is enabled, your INSERT query will be logged.</li>    <li> If revisions are enabled for the table, the record inserted will be tracked by revisions.</li>    <li>Insert HOOKS are not executed.</li>    <li>Automatic email notices ($enable_insert_notice_email_sending = 1) are not sent.</li>    <li>Data validation is not executed (e.g. if, for a field set as "email" in form configurator, you provide a non-valid email, the insert operation will be executed anyway).</li>    </ul>        <p><h3>delete_records($table_name, $field_name, $field_value)</h3>        <p>Delete (one or more) records from the table $table_name matching a $field_name / $field_value pair. In the following example, we delete from the <em>customers</em> table the customer having <em>id_customer</em> 10.        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      ddb_api::delete_records('customers', 'id_customer', 10);</div>          <p>Since id_customer is a unique field here, we will delete max one record, if your condition matches more than one record, you will delete all the matching records.        <p>When you call delete_records():    <ul>    <li> If SQL logging is enabled, your DELETE query will be logged.</li>    <li> If revisions are enabled for the table, the records deleted will be tracked by revisions, however if there are concurrent insert/update/delete operations on the same table, it may happen that DaDaBIK doesn't correctly registered in revisions, as deleted records, all and only the records actually updated. If you want to avoid this issue, you should set your DBMS transaction isolation level to: Serializable.</li>    <li>Delete HOOKS are not executed.</li>    </ul>        <p><h3>count_records($table_name, $field_name, $field_value)</h3>        <p>Returns the number of records matching a specified $field_name / $field_value pair in the $table_name table. In the following example, we count the number of customers whose city is "Bologna".        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      ddb_api::count_records('customers','city_customer','Bologna')</div>                        <p><h3>load_table_page($table_name, $page_type, $id_value, $message_text, $message_type)</h3>        <p>Load a page (based on a table/view), optionally displaying a message. $id_value is used to identify a specific record, if needed.<br><br>        <strong>Parameters:</strong><br><br>         <strong>$table_name:</strong> name of the table or view<br><br>    <strong>$page_type:</strong> 'results_grid'|'edit'|'details'|'insert'|'advanced_search'<br><br>    <strong>$id_value:</strong> for edit and details pages, the value of the unique field of the record you want to select<br><br>    <strong>$message_text:</strong> the messasge to display, if any. A corresponding $txt key must be available in the language file. The key can't contain spaces or quotes.<br><br>    <strong>$message_type:</strong> 'success'|'warning'|'error'<br><br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">    <strong>Example 1:</strong> load the results grid of the table customers, showing a success message<br><br>    ddb_api::load_table_page('customers', 'results_grid', NULL, 'operation_done', 'success');<br>    (In your language file, e.g. english_custom.php, you must add something like $txt['operation_done'] = 'Operation executed!';)<br><br><br>        <strong>Example 2:</strong> load the edit form of the record having id_customer 10 in the customers table, showing a warning message<br><br>    ddb_api::load_table_page('customers', 'edit', '10', 'check_this_and_that', 'warning');<br><br><br>        <strong>Example 3:</strong> ddb_api::load_table_page('products', 'details', '5');<br><br><br>        <strong>Example 4:</strong> ddb_api::load_table_page('products', 'insert');    </div>            <p><h3>load_custom_page($id, $additional_input)</h3>        <p>Load a page (custom PHP or HTML page), optionally sending some custom additional input.<br><br>        <strong>Parameters:</strong><br><br>         <strong>$id:</strong> the ID of the page to load <br><br>    <strong>$additional_input:</strong> optional string containing any value you may need to pass via GET to the page<br><br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">    <strong>Example 1:</strong> load the page having ID 19<br><br>    ddb_api::load_custom_page(19);<br><br><br>        <strong>Example 2:</strong> load the page having ID 22, passing to the page the string "from_confirmation_button"<br><br>    ddb_api::load_custom_page(22, 'from_confirmation_button');<br><br><br>    </div>                        <h2>Stringify Fetches</h2>    <p>DaDaBIK set the PDO ATTR_STRINGIFY_FETCHES attribute to TRUE:        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">      setAttribute(PDO::ATTR_STRINGIFY_FETCHES, true);</div>           <p> this means that if you use the main DaDaBIK PDO connection, you will always get PHP strings when you fetch records from the database, even for numeric database fields.                </p>    <p> </p>    <h1 style="display:inline;"><a name="low_coding_calculated"></a>10.1. Calculated fields</h1>    <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>    <hr size="1">    <p>A calculated&nbsp; field is a form field whose value is not directly      entered by the user but is calculated according to a function.</p>    <p>For example you might have a table <em>products</em> containing the      fields <em>price, tax, total_price</em> and you want the field <em>total_price</em>      to be computed as <em>price </em>+ <em>tax</em>. To get this results,      you just need to fill&nbsp; - for the field total_price in forms      configurator - the parameter "Calculated field function", setting the name      of a custom function that will handle the calculation, for example      dadabik_get_total_price. Then you need to write the function's code in      /include/custom_functions.php. Here is an example of the simple      dadabik_get_total_price:</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function      dadabik_get_total_price ($params){<br>      &nbsp;&nbsp;&nbsp; // first, check if price and tax are not empty and not      null<br>      &nbsp;&nbsp; &nbsp;if ( $params['price'] !== '' &amp;&amp;      !is_null($params['price']) &amp;&amp; $params['tax'] !== '' &amp;&amp;      !is_null($params['tax'])){<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return ($params['price'] +      $params['tax']);<br>      &nbsp;&nbsp; &nbsp;}<br>      &nbsp;&nbsp; &nbsp;else{<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return NULL;<br>      &nbsp;&nbsp; &nbsp;}<br>      &nbsp;&nbsp; &nbsp;<br>      }</div>    <p>As you can see, we have checked if the input values are NULL or empty (      '' ) before performing the addition. This is particularly useful in the      insert form: when you open an insert form, total_price_product is      immediately calculated according to the values of price_product and      tax_product you have in the form, but if you have just opened the insert      form, they would be empty. </p>    <p>Here are some rules you should consider when you write a calculated field      function. </p>    <ul>      <li>Each calculated field function receives in input an associative array        $params containing all the values coming from the INSERT / UPDATE form.      </li>      <li><i>select_multiple</i> and <i>file</i> fields don't work correctly as        input for a calculated field function </li>      <li>For <i>select_single_radio</i> fields, if the user didn't select any        option, the corresponding key in $parameters_ar won't be set </li>      <li>If you need to use a field value, the correspondent field cannot be        disabled in the edit form (PLEASE NOTE THAT the calculated field, apparently, would work in the form but the  value stored would be WRONG) </li>      <li>Using as input a field from the form that is also a calculated field        can lead to unexpected results. </li>      <li>Each calculated field function must return the value to assign to the        calculated field and it is automatically executed every time an insert        or update operation is executed and every time one of the input value is        modified in the INSERT / UPDATE form. </li>      <li>If you want to assign a calculated value to a date/date_time field, regardless of format and format_edit you set as a config parameter, you have to set the value in the following format yyyy-mm-dd hh:mm:ss</li>    </ul>    <p>In this video chapter you will learn, step by step, how to use calculated fields in DaDaBIK.</p>   <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/bakLCghM66U?start=952" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>    <h1 style="display:inline;"><a name="low_coding_validation"></a>10.2. Custom validation functions</h1>    <hr size="1">    <p>DaDaBIK, by default, validates input data according to the field      type/content. For example, if a field is set as <i>email</i>, DaDaBIK      will throw an error if a user tries to insert a non-valid email. However,      you can write your own validation function and tell DaDaBIK, in form      configurator, to use it for a specific field. You can write your custom      validation function in      include/custom_functions/custom_validation_functions.php or, if you      prefer, in the general include/custom_functions.php file. </p>    <p>In this simple example we just check if the value of the field      quantity_product is between 0 and 30:</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function      dadabik_validate_quantity_product ($params){<br>      &nbsp;&nbsp; &nbsp;if ( $params['quantity_product'] &gt;= 0 &amp;&amp;      $params['quantity_product'] &lt;= 30)){<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return true;<br>      &nbsp;&nbsp; &nbsp;}<br>      &nbsp;&nbsp; &nbsp;else{<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return false;<br>      &nbsp;&nbsp; &nbsp;}<br>      &nbsp;&nbsp; &nbsp;<br>      }</div>    <p>Here are some rules you should consider when you write a custom      validation function. </p>    <ul>      <li>Each custom validation function receives in input an array $params        containing ALL the values coming from the form posted (the validation        rule for a field could depend on the value of other fields) . </li>      <li>Only NOT NULL and NOT empty field values are validated, if you are        looking for a method to check requiredness, you can simply set a field        as required in the form configurator. </li>      <li>If you need to use a field value, the correspondent field cannot be        disabled in the edit form and cannot be a calculated field (which is        always disabled) </li>      <li>Each custom validation function must return the boolean true or the        boolean false. </li>      <li>You also have to specify the error message in your language file (see        /include/languages), using as a key nameofthefunction_not_valid; e.g.,        for the above example, you would add a sentence to the        $normal_messages_ar array having key =        dadabik_validate_quantity_product_not_valid </li>    </ul>    <p>In this video chapter, you will see an example of custom validation function.</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/bakLCghM66U?start=176" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>    <h1 style="display:inline;"><a name="low_coding_formatting"></a>10.3. Custom formatting functions</h1>    <hr size="1">    <p>DaDaBIK, by default, formats data according to the field type/content.      For example, if a field is set as <i>url</i>, DaDaBIK will show, in the      datagrid view and details view, its value as a link. However, you can      write your own formatting function and tell DaDaBIK, in form configurator,      to use it for a specific field. You can write your custom formatting      function in include/custom_functions/custom_formatting_functions.php or,      if you prefer, in the general include/custom_functions.php file. </p>    <p>In this simple example we format the field last_name_customer to be      displayed in red.:</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function      dadabik_format_last_name_customer ($value, $id){<br>      &nbsp;&nbsp; &nbsp;return '&lt;span      style="color:red"&gt;'.htmlspecialchars($value).'&lt;/span&gt;';<br>      }</div>    <p>Here are some rules you should consider when you write a custom      formatting function. </p>    <ul>      <li>Each custom formatting function receives in input the value to display        $value and the value of the unique field of the record processed ($id) </li>      <li>If the field to format is a select_single/select_multiple having more        than one linked field, $value is an array, where $value[0] is the value        of the first linked field, $value[1] the value of the second and so on </li>      <li>Each custom validation function must return the formatted value </li>      <li>If you don't want your content to be interpreted as HTML (probably, in most of the cases, you don't), you must pass your content through <i>htmlspecialchars</i> (see example above), otherwise you could have unexpected results. This is particularly true if you are using custom formatting functions with PDF custom templates: if for example you have a < sign in your content, TCPDF might interpret it as HTML and silently stop the rendering of the page because of a rendering error, giving you the false impression that, for example, the records related to a search are less than they actually are.</li>    </ul>    <p>In this video chapter, you will see an example of custom formatting function.</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HRaDLMpaZMU?start=2658" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>    <h1 style="display:inline;"><a name="low_coding_required"></a>10.4. Custom required functions / conditional      fields</h1>    <hr size="1">    <p>You can set a field as required (yes/no) in form configurator, without      writing any code. However, sometimes you want to decide if a field is      required according to some logic (e.g. according to the value of another      field); in these cases, you should use a custom required function. The      same function can be also used to specify if a field should be displayed      or not in your insert and edit form: again, normally you can do it simply      by setting its permissions (e.g. insert = yes) but sometimes you need a      more complex logic (e.g. show the field B in the insert form only if the      field A is &gt; 50). You can write your custom required function in      include/custom_functions/custom_required_functions.php or, if you prefer,      in the general include/custom_functions.php file. </p>    <p>In this simple example, we have created a function for the field "state",      which is display and required only if the country is "USA".</p>    <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function      dadabik_display_required_state_customer ($params){<br>      &nbsp;&nbsp; &nbsp;if ( $params['country_customer'] === 'USA'){<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['show'] = true;<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['required'] = true;<br>      &nbsp;&nbsp; &nbsp;}<br>      &nbsp;&nbsp; &nbsp;else{<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['show'] = false;<br>      &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['required'] = false;<br>      &nbsp;&nbsp; &nbsp;}<br>      &nbsp;&nbsp; &nbsp;return $a;<br>      &nbsp;&nbsp; &nbsp;<br>      }</div>    <p>Here are some rules you should consider when you write a custom required      function. </p>    <ul>      <li>Each custom required function receives in input an associative array        $params containing all the values coming from the INSERT / UPDATE form.      </li>      <li><i>select_multiple</i> and <i>file</i> fields don't work correctly as        input for a custom required field function </li>      <li>For <i>select_single_radio</i> fields, if the user didn't select any        option, the corresponding key in $parameters_ar won't be set </li>      <li>if you need to use a field value, the correspondent field cannot be        disabled in the edit form and cannot be a calculated field (which is        always disabled) </li>      <li>each custom required function must return an associative array with        two elements: 'required' and 'show' and for each element the boolean        value true or the boolean value false. </li>      <li>About the display (true/false) value: consider that this function just        hides/displays the field in the form, but the PERMISSIONS tab in the        admin section (or 'Forms presence' in form configurator if you disabled granlar permissions) is still the place where you decide if a field will be considered or not for INSERT and UPDATE operations.         For example, in this        "state" case, for the field state you should set YES for both CREATE and        EDIT so that insert (or update) operations will use the "state" field        value (yes, they will use it even if the field is hidden, but this        shouldn't be a problem, if the user didn't fill it, it will be empty or        null; it can be a problem if the user fills a field with a value and        then makes the field disappear: even if it is not in the form, the field        will pass its value to the insert or update process). </li>      <li>if the field is a calculated field, the "required" element will not be        taken into consideration, the "show" elment will be used to show/hide        the field in the form, but even if the field is hidden, its value will        be computed anyway during insert and update operations. </li>      <li>To guarantee backward compatibility (before v. 10 this function only        controlled requiredness), this function can also return, instead of an        associative array, just a boolean value (true or false): in this case,        such value controls the requiredness of a field.    </ul>        <p>Starting from V. 10.5, the same function can be used to decide if you          want to show a field (column) in the results grid. In order for a          column to be displayed, the corresponding permissions must always be          set to YES (or MY) but you might decide not to show a column even if          the permissions are set to YES (or MY) according to custom rules. Here          is a situation where you might need it: let's say you have a <i>products</i>          table, having a field <i>product_type</i>. According to the product          type, you might have a different set of fields describing the product;          you might want, according to the product type the user selects as a          search filter (if any) to show only the related columns. </p>        <p>The array $params, in this case, will contain the list of the search          filters (if any) set by the user. For example, if the user is          searching for products having price_product &gt; 50 and type_product =          5, $params will contain the following values:<br>          <br>          $params['select_types']['price_product'] = 'greater_than'<br>          $params['select_types']['type_product'] = 'is_equal'<br>          $params['values']['price_product'] = '50'<br>          $params['values']['type_product'] = '5'<br><br>                    If the search filter is "between" and the user, for example, is searching for products having price between 10 and 15, $params will contain the following values:<br><br>                    $params['select_types']['price_product'] = 'between'<br>          $params['values']['price_product'] = '10'<br>          $params['values']['price_product_between____'] = '15'<br><br>                    If you have a field categories_product, select_multiple* field, and the user is searching for products having both the categories 2 and 20, $params will contain the following values:<br><br>                    $params['select_types']['categories_product'] = 'is_equal'<br>          $params['values']['categories_product'][0] = '2'<br>          $params['values']['categories_product'][1] = '20'<br><br>                    Please note that you might have in $params also references to the fields the user left blank. Eg. if for "type_product" the user left "is_equal" and an empty box, this parameter isn't used by DaDaBIK for the execution of the query, but you will see it in $params:<br><br>                    $params['select_types']['type_product'] = 'is_equal'<br>          $params['values']['type_product'] = ''<br><br>                      At the moment you don't have as a parameter the  "All the conditions required" Vs. "Any of the conditions required" search option selected by the user.                  </p>        <p>Here is an example: we want to show the field <i>size_product</i>          only when the <i>type_product</i> selected is 4 (forms) or a filter <i>type_product</i>          = 4 has been set (results grid)</p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function          dadabik_display_required_size_product ($params, $page_type){<br>          &nbsp;if ( $page_type === 'form'){<br>          &nbsp;&nbsp; &nbsp;if ( $params['type_product'] === '4'){<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['show'] = true;<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['required'] = true;<br>          &nbsp;&nbsp; &nbsp;}<br>          &nbsp;&nbsp; &nbsp;else{<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['show'] = false;<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['required'] = false;<br>          &nbsp;&nbsp; &nbsp;}<br>          &nbsp;}<br>          &nbsp;if ( $page_type === 'results_grid'){<br>          &nbsp;&nbsp; &nbsp;if ( isset($params['values']['type_product'])          &amp;&amp; isset($params['select_types']['type_product']) &amp;&amp;          $params['values']['type_product'] === '4' &amp;&amp;          $params['select_types']['type_product'] === 'is_equal' ){<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['show'] = true;<br>          &nbsp;&nbsp; &nbsp;}<br>          &nbsp;&nbsp; &nbsp;else{<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $a['show'] = false;<br>          &nbsp;&nbsp; &nbsp;}<br>          &nbsp;}<br>          &nbsp;return $a;<br>          &nbsp;&nbsp; &nbsp;<br>          }</div>        <p>As you can see, we need an additional function parameter, $page_type;          furthermore, </p>        <p>Some additionale notes: </p>        <ul>          <li>You have to enable the use of conditional fields for results grid            by setting $enable_custom_display_results_grid = 1 in your            config_custom.php file. </li>          <li>It only works with classic results grid (it doesn't work with the            list view) </li>          <li>In the example above, ONLY if the filter is type_product = 4 the            field will be displayed, a filter type_product &gt; 3 (which            probably doesn't make much sense anyway) wouldn't display it </li>          <li>The function doesn't have impact on the exported CSV </li>          <li>Being a custom function, you don't necessary have to use $params,            you can use the logic you want; for example, do you want to show a            field only on Monday? You can do it. </li>        </ul>        <p>In this video chapter, you will see conditional fields in action.</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/XVSs61spPHY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>        <h1 style="display:inline;"><a name="low_coding_default_value"></a>10.5. Custom default value functions          (DaDaBIK Enterprise/Platinum only)</h1>        <hr size="1">        <p>You can set the default value for a field in the form configurator,          without writing any code. However, sometimes you might need to define          the default value according to a more complex logic; in these cases,          you can write a custom default value function and tell DaDaBIK, in          form configurator, to use it for a specific field. You can write your          custom default value function in          include/custom_functions/custom_default_value_functions.php or, if you          prefer, in the general include/custom_functions.php file. </p>        <p>In this simple example we provide, for the field date_order, as a          default, the current date:</p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function          dadabik_set_default_date_order (){<br>          &nbsp;&nbsp; &nbsp;return date('Y-m-d');<br>          }</div>        <p>Here are some rules you should consider when you write a custom          default value function. </p>        <ul>          <li>A custom default value function doesn't receive anything in input          </li>          <li>Each default value function must return the default value to set </li>        </ul>        <p></p>        <h1 style="display:inline;"><a name="low_coding_startup"></a>10.6. The custom startup function</h1>        <hr size="1">        <p>For some particular applications, you might need that DaDaBIK          executes some custom PHP code every time a page is loaded. For this          purpose, you can use a <i>custom startup function</i>: in          /include/custom_functions.php you set the name of the function (if          any) and you define the function itself. </p>        <p>In this example we have defined a dadabik_startup() function that          will be executed every time a page is loaded. The function is executed          after the connection to the database, so you can use the connection in          your code, if you need it.</p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          $custom_startup_function = 'dadabik_startup';<br>          function dadabik_startup (){<br>          &nbsp;&nbsp; &nbsp;... your custom code here ... <br>          }</div>        <p> </p>        <h1 style="display:inline;"><a name="low_coding_buttons"></a>10.7. Standard and Custom buttons</h1>        <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>        <hr size="1">        <p>DaDaBIK automatically displays the buttons you need to execute          standard operations (e.g. the edit, delete, details buttons you          see in the results grid), these are <strong>standard buttons</strong>; however, you can also add additional            buttons that execute custom PHP or Javascript code, these are <strong>custom buttons</strong>.</p>            <h2 style="display:inline;">Standard buttons</h2>     <p>Standard buttons automatically appear when you need them and when the current user has the rights to execute the related operation (e.g. the CREATE NEW button only appears if the user has <i>create</i> permissions on the current table).<br><br>For some standard buttons (namely, the SAVE button in the insert and edit forms and the INSERT AS NEW button in the edit form) you can optionally add a <strong>custom confirmation message</strong> writing some configuration code in the /include/custom_functions/custom_buttons.php file. For example, here we want to add an "Are you sure?" confirmation message to the SAVE button of the customers edit form. Only if the user clicks "ok" the operation is executed.           <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$button_confirm_messages['customers']['edit']['save']['type'] = 'fixed';<br>$button_confirm_messages['customers']['edit']['save']['value'] = 'Are you sure?';          </p>        </div>     <br><br>          The two forms you can set the confirmation message for are 'edit' and 'insert', the buttons are 'save', 'insert', 'insert_as_new'. For <strong>type</strong>, the available options are:<br>        <ul>          <li>fixed (the message is exactly what you set for the parameter "value")</li>          <li>language_file (the message depends on the language            set, what you set for the parameter "value" is the key - normal_messages_ar array - to look at in            the corresponding custom language file)</li>        </ul>     <h2 style="display:inline;">Custom buttons</h2>     <p>                <p>Some use cases for custom buttons:</p>        <ul>          <li>you want to add a button in your form that copies the content of a            series of fields (e.g., in a customer registration form, the contact            address fields) to a series of other fields (e.g., in a customer            registration form, the invoice address fields)</li>          <li>you want to add an "Approve" button at the top of your edit form            that changes the status of your order from "waiting for approval" to            "approved"</li>          <li>you want to add a "Send" button a the top of your details page            that sends via email the current details of an order to someone.<br>          </li>        </ul>        <p>To add a custom button, you have to add an element to the <strong>$custom_buttons            array</strong> in the /include/custom_functions/custom_buttons.php file, following          the template we'll show in the example below. In the following          example, we want to add a "Copy address" button next to the          contact_address field of the customers insert form; that button copies          the contact_address value into the invoice_address value, using          Javascript.</p>        <p>In /include/custom_functions.php you have to write (we'll see the          meaning of all the options later):</p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$custom_buttons['customers'][$cnt]['type'] = 'javascript';<br>            $custom_buttons['customers'][$cnt]['callback_function'] =            'dadabik_copy_address';<br>            $custom_buttons['customers'][$cnt]['permission_needed'] = 'insert';<br>            $custom_buttons['customers'][$cnt]['show_in'][] = 'insert_form';<br>            $custom_buttons['customers'][$cnt]['position_form'] =            'contact_address';<br>            $custom_buttons['customers'][$cnt]['label_type'] = 'fixed';<br>            $custom_buttons['customers'][$cnt]['label'] = 'Copy address';<br>            $custom_buttons['customers'][$cnt]['style'] =            'background:#000;width:200px';<br>            $custom_buttons['customers'][$cnt]['id'] = 'copy_address_button';<br>            $cnt++;<br>          </p>        </div>        <p>Since we have set, as a callback function, a Javascript function, we          have to write such function in /include/custom_functions.js </p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>function dadabik_copy_address()</p>          <p>{</p>          <p>&nbsp;&nbsp;&nbsp; $('[name="invoice_address"]')[0].value =            $('[name="contact_address"]')[0].value;</p>          <p>}<br>          </p>        </div>        <br>        <p>If your callback function is, instead, a PHP function, you can write it        in in /include/custom_functions.php.<br>        Please note that, to enable custom button, you have to set        $enable_custom_button_functions = 1 in config.php.<br>        <br>        Let's see all the options you have when you define a custom button.<br>        <p><strong>type</strong>, the type of callback function triggered by the          button; the available options are:</p>        <ul>          <li>javascript (a Javascript function)</li>          <li>php_standard (a PHP function, executed by loading a&nbsp;page in            the browser)</li>          <li>php_ajax (a PHP function, executed asynchronously via AJAX)</li>        </ul>        <p><strong>callback_function,</strong> the name of the callback function          (must start with "dadabik_")</p>        <p><strong>permission_needed, </strong>the permission the user needs in          order to see/use the button; the available options are:</p>        <ul>          <li>none (permissions are not checked, the button is always shown)</li>          <li>read</li>          <li>delete</li>          <li>edit</li>          <li>insert</li>          <li>details</li>          <li>custom_function: DaDaBIK shows the button (and allows the current            user to execute the related function) based on a custom function you            wrote; you have to define the name of the function with the            additional parameter permission_custom_function, the function must            return TRUE or FALSE.</li>        </ul>        <p><strong>show_in</strong>, where to show the button; the available          options are:</p>        <ul>          <li>edit_form</li>          <li>details_page</li>          <li>insert_form</li>          <li>search_form</li>          <li>results_grid</li>        </ul>        <p>Please note that, for show_in, you can also add multiple values; for        example: <br>        <p> </p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$custom_buttons['products'][$cnt]['show_in'][] = 'insert_form';</p>          <p>$custom_buttons['products'][$cnt]['show_in'][] = 'edit_form';</p>          <p><br>          </p>        </div>        <p>shows the button, for the products table, both in the insert and edit          forms.</p>        <p><strong>position_form</strong>, this parameter adds additional          details about the position: if you selected show_in:          results_grid,&nbsp; you can choose between:</p>        <ul>          <li> top (at the top of the results grid)</li>          <li>row (at each row of the results grid)</li>        </ul>        <p>for all the other show_in options you can choose "top" (at the top of        the form) or specify a field name if you want to display the button        close to a form field.<br>        <br>        <strong>label_type</strong>, the available options are:<br>        <ul>          <li>fixed (the label of the button is exactly what you set for the            parameter "label")</li>          <li>language_file (the label of the button depends on the language            set, what you set for the parameter "label" is the key - normal_messages_ar array - to look at in            the corresponding custom language file)</li>        </ul>        <p>the label_type parameter has also effect on confirmation_message.        <p><strong>label</strong>, the label of the button</p>        <p><strong>confirmation_message</strong>, a confirmation message you          want to show before executing the callback function (pelase note that          at the moment, confirmation messages containing single or double          quotes are not supported).</p>        <p><strong>style</strong>, CSS style (if any) to add to the button</p>        <p><strong>id</strong>, this is an optional parameter, you can specify          an id and such id will be used by DaDaBIK for the HTML's id attribute          of the button. It could be useful if you need to select the button          from your custom javascript code. In more detail, the id actually used          will be <strong>"cb__" + your ID</strong> where "cb__" can be changed          in config.php ($custom_button_ids_prefix). If you are using custom          buttons at row level, the id will be <strong>"cb__" + PKvalue + your            ID</strong> instead, where PKvalue is the value, for the current          record, of the field set as unique in DaDaBIK for the current table.<br>          Naming rules: you should use a unique id, different for each button          and the word you used for the id should not contain strings that are          not allowed for field names in DaDaBIK (see "known bugs, limitations          and unexpected behaviors" chapter, "Table and field names related"          paragraph) otherwise you can get unexpected results. Please note that          DaDaBIK doesn't do any check on the ID you choose.</p>        <p>Please note that, while a Javascript callback function doesn't          receive any input (but you can access the form values using Javascript          or Jquery) a PHP callback function receives, in input: $table_name          (the name of the current table/view), $where_field (the DaDaBIK unique          field name for&nbsp; the table/view), $where_value (the value of the          DaDaBIK unique field name). The combination of $table_name,          $where_field and $where_value allows to identify a specific record. In          some cases (positions: results_grid top, insert form, search form),          $where_field and $where_value are not set (they are set to NULL)          because the button is not related to a specific record. What we have          described here for PHP callback functions is also valid for the PHP          function you defined as permission_custom_function. </p>        <p>Let's see an example of php_standard function: we want to implement          in the edit form a button that changes the status of the order.</p>        <p> </p>        <p>In /include/custom_functions.php you have to write:</p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$custom_buttons['orders'][$cnt]['type'] = 'php_standard';<br>            $custom_buttons['orders'][$cnt]['callback_function'] =            'dadabik_change_status';<br>            $custom_buttons['orders'][$cnt]['permission_needed'] =            'custom_function';<br>            $custom_buttons['orders'][$cnt]['permission_custom_function'] =            'dadabik_permission_change_status';<br>            $custom_buttons['orders'][$cnt]['show_in'][] = 'edit_form';<br>            $custom_buttons['orders'][$cnt]['position_form'] = 'top';<br>            $custom_buttons['orders'][$cnt]['label_type'] = 'fixed';<br>            $custom_buttons['orders'][$cnt]['label'] = 'Approve';<br>            $custom_buttons['orders'][$cnt]['confirmation_message'] = 'Are you            sure?';<br>            $custom_buttons['orders'][$cnt]['style'] =            'background:#000;width:200px';<br>            $cnt++;<br>          </p>        </div>        <p>Since we have set, as a callback function, a PHP function, we have to          write such function in /include/custom_functions.php </p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function          dadabik_change_status($table_name, $where_field, $where_value)<br>          {<br>          &nbsp;&nbsp;&nbsp; global $conn, $dadabik_main_file, $quote;<br>          &nbsp;&nbsp; &nbsp;<br>          &nbsp;&nbsp; // since we want to modify the record and we are in the edit form, let's check if the user is still locking it<br>          &nbsp;&nbsp; // the check_refresh_record_lock() function provided by dadabik can do it for us<br>          &nbsp;&nbsp; if (check_refresh_record_lock($table_name, $where_field, $where_value) === false){<br>          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; die('You have lost the record lock, plese refresh the page and try again');<br>          &nbsp;&nbsp; }<br>          &nbsp;&nbsp; $sql = "UPDATE orders set status_order_user = 'approved'          WHERE ".$quote.$where_field.$quote." = :where_value";<br>          &nbsp; &nbsp;<br>          &nbsp;&nbsp; $res_prepare = prepare_db($conn, $sql);<br>          &nbsp; &nbsp;<br>          &nbsp;&nbsp; $values_to_bind = array();<br>          &nbsp; &nbsp;<br>          &nbsp;&nbsp; $values_to_bind['where_value'] = $where_value;<br>          &nbsp; &nbsp;<br>          &nbsp;&nbsp; foreach ($values_to_bind as $key =&gt; $value)<br>          &nbsp;&nbsp; {<br>          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $res_bind =          bind_param_db($res_prepare, ':'.$key, $value);<br>          &nbsp;&nbsp; }<br>          &nbsp; &nbsp;<br>          &nbsp;&nbsp; $res = execute_prepared_db($res_prepare,0);<br>          &nbsp;&nbsp; <br>          &nbsp;&nbsp; // let's go back to the edit form<br>          &nbsp;&nbsp;header('Location:'.$dadabik_main_file.'?tablename='.urlencode($table_name).'&amp;function=edit&amp;where_field='.urlencode($where_field).'&amp;where_value='.urlencode($where_value));          &nbsp; &nbsp;<br>          &nbsp;&nbsp; exit;<br>          }</div>        <br>        <p>Since we have set, for permission_needed, "custom_function", we also          have to write the permission function dadabik_permission_change_status          in /include/custom_functions.php. Let's say that our permission rule          is very simple: only the users belonging to the users group having id          3 can use this button: </p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function          dadabik_permission_change_status($table_name, $where_field,          $where_value)<br>          {<br>          &nbsp;&nbsp;&nbsp; global $current_id_group;<br>          &nbsp;&nbsp; &nbsp;<br>          &nbsp;&nbsp; if ($current_id_group === '3'){<br>          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return true;<br>          &nbsp;&nbsp; }<br>          &nbsp;&nbsp; else{<br>          &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; return false;<br>          &nbsp;&nbsp; }<br>          }</div>        <br>        <p>Please note that PHP callback functions normally are not used to produce        output; php_ajax functions, in particular, raise errors if you produce        output (via echo statements or in any other way).<br>        <br>        Starting from DaDaBIK v. 11.1, your php_ajax functions can also return a message (for example a confirmation message or an error message) to show after the execution of the code. Here is an example of how to use the new feature:<br><br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function          dadabik_change_status_2($table_name, $where_field, $where_value)<br>          {<br>          &nbsp;&nbsp; &nbsp;......your code...........<br>          &nbsp;&nbsp; &nbsp;if (..everything was fine....){<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$_cp_return['message'] = 'The status has been changed';<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$_cp_return['class_message'] = 'msg_ok';<br>&nbsp;&nbsp; &nbsp;}<br>&nbsp;&nbsp; &nbsp;else{<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$_cp_return['message'] = 'Unexpected error, the status cannot be changed';<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$_cp_return['class_message'] = 'msg_error';<br>&nbsp;&nbsp; &nbsp;}<br>&nbsp;&nbsp; &nbsp;return $_cp_return;<br>          }</div>        <br><p>As you can see from the example, you can also return a CSS class to use for displaying the message, built-in classes are msg_ok, msg_error and msg_alert. To guarantee backward compatibility, a message is displayed only if an associative array having the element "message" is returned, otherwise a generic "done!" message is displayed. The class is optional, the default class is msg_ok.<br><br>        <strong>Custom buttons and record ownership/Row-level Custom Filters</strong><br>        What happens if, for a specific group, let's say the group having id 4,        you have set, for a specific permission, e.g. "Delete", the value MY? As        you probably know, users belonging to that group will be able to delete        only the records they own (see "Owner permissions" chapter). What if you        use "delete" as permission_needed for a button then? All the users        having delete permissions set to YES or MY will see the button        (regardless of the record); however, if a user clicks the button for a        record he/she doesn't own, he/she will get an error. This is valid just        for php_standard and php_ajax callback functions, though: for a        javascript callback function, all the users having delete permissions        set to YES or MY will be able to execute the function. The same thing        happens for Row-level Custom Filters. <br>        <br>        <strong>Custom buttons and records selected by checkboxes</strong><br>        For a button on a results grid, you may want to execute your function        ONLY on the selected (by checkboxes) records. If, for a table TABLENAME,        the variable $_SESSION['checked_ids'][TABLENAME] is not null, it        represents the set of IDs (the values of the primary keys of the records        selected) that you can use to limit your action on the selected records.<br>        <br>        In particular, $_SESSION['checked_ids'][TABLENAME] is an associative        array: each element represents a record that has been checked by the        currently logged user, where the key of the element is the ID of the        record and the value of the element is always 1. <br>        <br>        For example if, for the table customers, the logged user selected two        records, having id 5 and 21, the resulting array will be the following:<br>        <br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          $_SESSION['checked_ids']['customers']['5'] = 1<br>          $_SESSION['checked_ids']['customers']['21'] = 1 </div>        <br>        You can easily iterate through all the selected records with a few lines        of PHP:<br>        <br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"> foreach          ($_SESSION['checked_ids']['customers'] as $key =&gt; $value){<br>          &nbsp;&nbsp;&nbsp;&nbsp;echo 'id of the selected element: '.$key;<br>          } </div>        <br>        <p><strong>Security note:</strong> don't assume that, since the user selected a        record, he/she has the right to do some operations on it. Selecting (via        checkbox) a record is an operation that doesn't require any permission.        Through the normal application interface, a user can select only the        records he/she is allowed to view, but a user could send a "fake"        malicious request to include a record in the $_SESSION['checked_ids']        even if he/she cannot view it (this is by design, to keep the the        operation as light as possible) so check the records before executing        operations on them. Also consider that, for the same reason (we are        talking about user-generated information), $_SESSION['checked_ids']        could contain malicious SQL code; to avoid SQL injections, always use        prepared statements.                <p>In this video tutorial you can see examples of PHP custom buttons.</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Z_l5VWV7o7I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>        <p>In this video chapter you can see examples of Javascript custom buttons.</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/TBJskah7Dqs?start=383" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>            <p>An additional related video:</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/lzWnRSA0Ze0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>                         <h1><a name="low_coding_hooks"></a>10.8. Hooks</h1>        <hr size="1">        <p>A DaDaBIK hook allows you to write some custom PHP code to be called          under certain circumstances.</p>        <p>There are two types of hooks: operational hooks and layout hooks; the          first ones are triggered before/after some data operations, the second          ones before / after some elements of the layout.</p>        <h2 style="display:inline;">Operational hooks</h2>        <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>        <p> </p>        <p>DaDaBIK currently supports <strong>before insert, after insert</strong>,          <strong>before update</strong>, <strong>after update</strong>, <strong>            after delete</strong>, <strong>            after login</strong> and <strong>            after user self-registration</strong> hooks for each table installed in a DaDaBIK          application, which means that for each table you can enrich the          DaDaBIK workflow with your own code functions, that can be executed:</p>        <ul>          <li>before an insert operation (before insert hook)</li>          <li>after an insert operation (after insert hook)</li>          <li>before an update operation (before update hook)</li>          <li>after an update operation (after update hook)</li>          <li>before a delete operation (before delete hook)</li>          <li>after a delete operation (after delete hook)</li>          <li>after a login operation (after login hook)</li>          <li>after a user self-registration operation (after self-registration hook)<br>          </li>        </ul>        <p>The <strong>after insert, update and delete hook functions</strong>          receive as parameter the value of the <i>DaDaBIK unique field</i> (typically, the value of the primary key) of the record          just inserted (if it is an autoincrement field), updated or deleted. If the DBMS is PostgreSQL, the unique field doesn't need to be autoincrement.</p>        <p>The <strong>before update hook function</strong> receives as input:<br>          1 - the value of the PK of the record the user is updating          <br>2- an associative array containing all the values the user          filled in the update form (where the array element's key is the name          of the field)          <br>3- the update type ('standard', 'csv' or 'live_edit').<br>          <br>If the update is the result of a <a href="#live_edit">live edit</a>, the associative array contains the values currently stored in the database (except from the value of the field being live-edited, which is the actual value submitted by the user); if you are using live edit in combination with before update hooks, consider that in two cases (select_multiple_* and image_file/generic_file field types) values in the database are represented in a different way respect to the original values submitted by the user from the form:          <ul>          <li>The selected options of select_multiple_* fields, in the database are represented as a list of options separated by a separator character (by default ~) e.g. '~1~98~' means the options 1 and 98 were selected, while when you submit a "standard" form (no live edit), each select_multiple_* field is submitted as an array where each element represents one of the option selected; however, DaDaBIK will translate for you the raw DB values in an associative array, exactly as there was a form submission.<br>The only non-obvious thing you should consider is that, if in the database you have an empty space value for a select_multiple_* field (not a very common situation, it means the user left the field blank and you have $treat_blank_as_null = 0 ), the corresponding element of the associative array won't be set (exactly as it would happen with form submissions if the user left the field blank and $treat_blank_as_null is 0 ); if the field, instead, is NULL, the corresponding element will be NULL.           <li>For file fields, when you submit a form, the name of the file is used as a parameter during a "standard" (no live edit) update, but DaDaBIK stores in the database a unique name assigned by the system (e.g. picture_78658.jpg instead of picture.jpg).            </ul></p>        <p>The <strong>before insert hook function</strong> receives as input          an associative array containing all the values the user filled in the          insert form (where the array element's key is the name of the field).<br>          <br>          The <strong>before delete hook function</strong> receives as input the value of          the PK field of the record the user wants to delete. Your hook          function can optionally returns "dont_delete" to prevent the deletion          of the record (the execution of an after delete hook, if any, will          also be prevented): in this case you also need to add a custom error          messages in your language file, if the name of the funciton is, for          example, dadabik_check_delete_customer, you have to add this entry in          your language file<br>          $error_messages_ar['dadabik_check_delete_customer_dont_delete'] =          '.... write your error message here ....';<br>        </p>        <p>          The <strong>after login hook function</strong> ($hooks['login']['after']) receives as input an associative array ($parameters_ar) having two keys, representing the id_user ($parameters_ar['id_user']) and the id_group ($parameters_ar['id_group']) of the user who just logged in. It is triggered only by a normal login executed through the login form (standard or LDAP), it is not triggered by a login executed via HTTP APIs or via Wordpress login sharing. In case your after login hook ends with an exit() or die(), you should first commit the transaction opened by DaDaBIK adding a <i>complete_trans_db();</i> code line. </p>                <p>          The <strong>after user self-registration hook function</strong> ($hooks['user_self_registration']['after']) receives as input an associative array ($parameters_ar) having only one key, representing the id_user ($parameters_ar['id_user']) assigned to the user who just registered.</p>        <p><strong>Examples</strong><br>Let's say for example that, when a new order is inserted into your          orders management application, you want to automatically update your          stock: you can do it by using a hook; in particular if you store your          orders in the <em>orders</em> table and your products information and          quantity available in the <em>products</em> table, you can add an <em>after            insert </em>hook on the table <em>orders</em> and write the code          needed to update the records of the table <em>products.</em></p>        <p>You can write your hook function in          include/custom_functions/operational_hooks.php or, if you prefer, in          the general include/custom_functions.php file.</p>        <p> Let's say we want to send an email to a specific address when a new          account is inserted in our system: this is a built-in DaDaBIK feature          (see parameter $enable_insert_notice_email_sending in config.php) but          let's say we don't to use the built-in feature and we want to          implement it using our custom code. We could, as in the following          example, define an <em>after insert</em> hook on the table accounts,          setting the function that has to be executed          (dadabik_send_notice_after_accounts_insert) and after we can write the          code of the function, that retrieves the name of the account just          inserted and send it via email to a specific address.</p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$hooks['accounts']['insert']['after'] =            'dadabik_send_notice_after_accounts_insert';</p>          <p>function dadabik_send_notice_after_accounts_insert($id_account)<br>            {<br>            &nbsp;&nbsp; &nbsp;global $conn;<br>            <br>            &nbsp;&nbsp;&nbsp; // get the name from the ID<br>            &nbsp;&nbsp; &nbsp;$sql = "SELECT name_account FROM accounts WHERE            id_account = :id_account";<br>            &nbsp;&nbsp; &nbsp;<br>            &nbsp;&nbsp; &nbsp;$res_prepare = prepare_db($conn, $sql);</p>          <p>&nbsp;&nbsp;&nbsp; $res_bind = bind_param_db($res_prepare,            ':id_account', $id_account);<br>            &nbsp;&nbsp; &nbsp;<br>            &nbsp;&nbsp; &nbsp;$res = execute_prepared_db($res_prepare,0);<br>            &nbsp;&nbsp; &nbsp;<br>            &nbsp;&nbsp; &nbsp;$row = fetch_row_db($res_prepare);<br>            &nbsp;&nbsp; &nbsp;<br>            &nbsp;&nbsp; &nbsp;mail ('john@mysite.com', 'New account inserted',            'A new account ('.$row['name_account'].') has been added.');<br>            &nbsp;&nbsp; &nbsp;<br>            }</p>        </div>        <p>Let's look at another example with the <em>before insert</em> hook:          an interesting use of the before insert hook is the modification of a          value inserted by the user before the corresponding record is actually          inserted, by overriding the content of the $_POST array. For example,          let's say that, for the table <em>customers</em>, we want to          capitalize the first name of the customer before insertion.</p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$hooks['customers']['insert']['before'] =            'dadabik_capitalize_first_name_customer';</p>          <p>function dadabik_capitalize_first_name_customer($parameters_ar)<br>            {<br>            &nbsp;&nbsp;&nbsp; $first_name_customer_capital =            strtoupper($parameters_ar['first_name_customer']);<br>            &nbsp;&nbsp; &nbsp;<br>            &nbsp;&nbsp;&nbsp; $_POST['first_name_customer'] =            escape($first_name_customer_capital); // DaDaBIK expects the values            in $_POST used for the insert to be properly escaped, so in case            they aren't already (values in $parameters_ar are not) you should            use the <em>escape</em> function.</p>          <p> &nbsp;&nbsp;&nbsp; <br>            }</p>        </div>                          <p>Please note that:</p>        <ul>          <li>you can use any name for hook functions, but the name MUST start            with dadabik_</li>          <li>if you need to execute operations on the database, you have to add            the global $conn; code line (as in the above example)</li>          <li>the delete hook doesn't work after a "delete all" or "delete selected" operation.</li>          <li>for operational hooks, you don't have to worry about transactions            in your code: the after insert, update and delete hook functions are            executed inside a transaction that starts before the insert, update            and delete operations are executed and ends after the hook functions            execution; the before update hook is also inside the same            transaction which starts before its execution.</li>          <li>for each hook, you can call just ONE function; you cannot, for            example, link two different functions to            hooks['accounts']['delete']['after']</li>          <li>The before insert hook doesn't work when a record is automatically            inserted using the "other..." option from a dropdown menu            (select_single field) </li>        <li>Operational hooks are not triggered by SQL operations executed by your custom code, even if Custom Code API is used (e.g. if you execute an UPDATE statement on table A using your custom code, the before/after update hooks for table A are not executed).</li>        </ul>        <p>In this video chapter you will see examples of operational hooks.</p>        <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HRaDLMpaZMU?start=1504" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>        <h2>Layout hooks</h2>        <p> </p>        <p>DaDaBIK currently support:</p>        <ul>          <li>header hook ($hooks['custom_header_1'])</li>          <li>footer 1 hook ($hooks['custom_footer_1'])</li>          <li>footer 2 hook ($hooks['custom_footer_2'])</li>          <li>before login form hook ($hooks['login_form']['before'])</li>          <li>And, for each table/view:</li>          <ul>            <li>before results grid header hook              ($hooks[TABLENAME]['resultsgrid_header']['before'])</li>            <li>after results grid header hook              ($hooks[TABLENAME]['resultsgrid_header']['after'])</li>            <li>after quick search filters hook              ($hooks[TABLENAME]['quicksearch']['after'])</li>            <li>after 2 results grid header hook              ($hooks[TABLENAME]['resultsgrid_header']['after_2'])</li>            <li>before edit form header hook              ($hooks[TABLENAME]['edit_form_header']['before'])</li>            <li>after edit form header hook              ($hooks[TABLENAME]['edit_form_header']['after'])</li>            <li>before insert form header hook              ($hooks[TABLENAME]['insert_form_header']['before'])</li>            <li>after insert form header hook              ($hooks[TABLENAME]['insert_form_header']['after'])</li>            <li>before search form header hook              ($hooks[TABLENAME]['search_form_header']['before'])</li>            <li>after search form header hook              ($hooks[TABLENAME]['search_form_header']['after'])</li>            <li>before details page header hook              ($hooks[TABLENAME]['details_form_header']['before'])</li>            <li>after details page header hook              ($hooks[TABLENAME]['details_form_header']['after'])</li>          </ul>        </ul>        <p>Let's say for example that you want to display some contacts          information in the footer of your application: you can do that by          defining a footer 2 hook, which is triggered just before the end of          the page (before the "p owered by: DaDaBIK database front-end"          statement); here is an example (all your hook functions must be          written in the /include/custom_functions.php file)</p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$hooks['custom_footer_2'] = 'dadabik_print_contacts';</p>          <p>function dadabik_print_contacts()<br>            {<br>            &nbsp;&nbsp;&nbsp; echo '&lt;p&gt;Our contact address is ..... ';<br>            }</p>        </div>        <p>Let's do another example: you want to give some instructions to your          users when they fill the insert form of the <em>product</em> table;          you can do that by defining a before insert form header hook on the          table <em>products</em>: </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$hooks['products']['insert_form_header']['before'] =            'dadabik_print_products_instructions';</p>          <p>function dadabik_print_products_instructions()<br>            {<br>            &nbsp;&nbsp;&nbsp; echo '&lt;p&gt;Use this form when a new products            needs to be registered. ';<br>            }</p>        </div>        <p>Please note that:</p>        <ul>          <li>you can use any name for hook functions, but the name MUST start            with dadabik_</li>          <li>the functions triggered by layout hooks normally contain just <em>echo</em>            statements, but they can also be more complex, there is no limit.</li>          <li>for each hook, you can call just ONE function; you cannot, for            example, link two different functions to hooks['custom_footer_2']</li>        </ul>        <strong></strong>        <ul>        </ul>        <p>In this video chapter you will see examples of layout hooks.</p>       <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/aTSTzxp0_qc?start=5967" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>                        <h1 style="display:inline;"><a name="low_coding_row_level"></a>10.9. Row-level Custom Filters</h1>        <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>        <hr size="1">        <p>Sometimes you need to filter, according to some criteria, the records          of a table/view that a user can see.</p>        <p>Take a helpdesk application, for example: let's say the help requests          are inserted by some managers and each help request is then assigned          by a manger to a member of the IT staff group; you might need to          filter the requests so that each member of the IT staff can only          see/modify/delete the requests assigned to them.</p>        <p>If your criteria is based on record ownership (who, user or group,          inserted the record is the one who can see and/or modify and/or delete          the record) you can use simply use the <span style="font-style: italic;">owner            permissions</span> (see later in this manual), in all the other          cases, you can use row-level custom filters.</p>        <p>You can define your custom filters in          include/custom_functions/custom_filters.php or, if you prefer, in the          general include/custom_functions.php file. Let's define a row-level          custom filter for a table/view:</p>        <br>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>$custom_filters['requests'] = 'dadabik_custom_filter_requests';</p>        </div>        <p>With the above line we are saying that we define a custom filter for          the table requests and that the filter is generated by the custom          function dadabik_custom_filter_requests(). Then we need to write such          function, for example:</p>        <p> </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">function          dadabik_custom_filter_requests()<br>          {<br>          &nbsp;&nbsp;&nbsp; global $current_user, $current_id_group, $quote;<br>          &nbsp;&nbsp; &nbsp;<br>          &nbsp;&nbsp;&nbsp; if ($current_id_group == 3){ // apply the filter          only for the IT staff group<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $filter =          $quote."assigned_to_request".$quote." = '".$current_user."'";<br>          &nbsp;&nbsp;&nbsp; }<br>          &nbsp;&nbsp;&nbsp; else{<br>          &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; $filter = "1=1";<br>          &nbsp;&nbsp;&nbsp; }<br>          &nbsp;&nbsp; &nbsp;<br>          &nbsp;&nbsp;&nbsp; return $filter;<br>          }</div>        <p>In our example we want to add, if the current user is part of the IT          staff group (let's assume that the IT staff user groups has ID 3), an          ADDITIONAL <em>where clause</em>, showing only the requests assigned          to him/her (being assigned_to_request the field set by the IT          manager). All the other users (not belonging to the id_group 3),          instead, will see all the records. </p>        <p>Each field and table name must be surrounded by quotes; you can use          the global $quote variable, which automatically add the correct quote          according to your DBMS. </p>        <p>$current_user and $current_id_group are two global variables provided          by DaDaBIK, they contain the username and the group ID of the user          currently logged. In case authentication is disabled, the two          variables will be set as "nobody".</p>        <p>The filter defined in the function is applied on the top of other          filters applied by the user (for example by executing a search) or          generated by the owner permissions (if set).</p>        <p>Here are a few more examples of use cases where you might find          row-level filters useful:</p>        <ul>          <li>In a sales management application, agents can only see orders            related to their area</li>          <li>In a multi-schools application, each principal or manager can only            view data for students belonging to their school</li>          <li>In the application for a physiotherapy practice,&nbsp; each            therapist can only view data records belonging to their patients</li>        </ul>        <p>Since you can create your own additional filter, you have a lot          of&nbsp; flexibility; you can create very simple filters such as :</p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$filter =          'paid_invoice = 0'</div>        <br>        <p>to show, for everybody, only the invoices where the field <span style="font-style: italic;">paid_invoice</span>        is 0 (in this case, the filter is basically an alternative to a VIEW) or        complex filters based on very complex criteria / parameters, not        necessarily related to the characteristics of the user logged.<br>        <p>There are two situations where row-level custom filter don't apply, let's explain with two examples:<br><br>        1) Customers table, edit form, field id_city (lookup field, linked table: cities). If you apply a row-level custom filter to the cities table, in the customer edit form an id_city value could appear even if it should be filtered out by the custom filter, but ONLY IF that id_city value is already stored in the customer record (to avoid blank values)<br><br>        2) Customers table, results grid, field id_city (lookup field, linked table: cities). If you apply a row-level custom filter to the cities table, in the results grid of customers an id_city value (or, better, the related linked field value) could appear even if it should be filtered out by the custom filter, but ONLY IF that id_city value is already stored in the customer record (to avoid blank values).        <p>Please note that you can use any name for the custom filter functions          but the name MUST start with dadabik_<strong></strong> </p>        <ul>        </ul>        <p>In this video chapter, you will see, step-by-step, how to use row-level custom filters</p>        <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/HRaDLMpaZMU?start=793" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br>        <p> </p>        <p> </p>        <h1><a name="low_coding_custom_pages"></a>10.10. Custom Pages</h1>        <p>(DaDaBIK Enterprise/Platinum only)</p>        <hr size="1">        <p>As explained in the introduction of this chapter, with DaDaBIK, from          the <em>pages</em> section of the administration interface, you can          create pages based on a database table/view or custom HTML and PHP          pages. PHP pages are custom pages running your custom PHP code and to          run them you have to enable the feature from config.php          ($enable_custom_php_pages = 1).</p>        <p>Here are some instructions to follow when you build a custom PHP          page. </p>        <p>To avoid conflicts with the DaDaBIK engine, you must use the prefix _cp_ (custom pages) to name your           variables, functions and classes, for          example: </p>        <ol>          <li> If in your code you need a variable $test name the variables            $_cp_test instead.</li>          <li> If in your code you need a session variable $_SESSION['test']            name it $_SESSION['_cp_test'] instead</li>        </ol>        <p>The same rule applies to $_POST, $_GET and $_COOKIES so if you create          a form that posts values using POST, a field first_name must be named          _cp_first_name instead and the value will be then available in          $_POST['_cp_first_name'].<br>          <br>          For your local variables (variables having local scope in your functions), you don't need to follow the _cp_ naming rules.<br>          <br>                    YOU ARE RESPONSIBLE of following the above rules if you want to avoid          conflicts and unexpected behaviours by the DaDaBIK engine, currently          there isn't any check on the variable names you use. Also, please make          sure that your database field names don't start with _cp_, because          this could also lead to conflict.<br>          <br>          You can, however, READ all the DaDaBIK variables you can access in          your scope, in particular you will find useful the following ones:<br>          $_SESSION['logged_user_infos_ar']["id_user"] -&gt; the ID of the          logged user<br>          $_SESSION['logged_user_infos_ar']["username_user"] -&gt; the username          of the logged user<br>          $_SESSION['logged_user_infos_ar']["id_group"] -&gt; the group ID of          the logged user<br>          <br>          <br>          $conn -&gt; the PDO connection link with the Database          <br>          <br>          All your custom pages need to start with the following line:          <br>          <br>          if(!defined('custom_page_from_inclusion')) { die(); }          <br>          <br>          this prevents your page from being called directly, bypassing the          DaDaBIK authentication system          <br>          <br>          In custom PHP pages, $_POST, $_GET and $_COOKIES are not "escaped" for          your queries (so a string POSTed as "tes't" will remain "tes't",          regardless of your magic_quotes_gpc settings), we suggest to use          prepared statements which don't require explicit escapinng for field          values. <br>          <br>          If you use custom code in other situations (custom functions, hooks,          .... ), however, $_POST, $_GET and $_COOKIES are always escaped by          DaDaBIK.<br>          <br>        </p>        <p> </p>        <h1><a name="low_coding_dashboards"></a>10.11. Custom pages and dashboards</h1>        <hr size="1">        <p>Custom pages can be used to create dashboards. A dashboard is a          collection of information that represent, synthetically, some key          indicators of your data/application. For example a typical dashboard          might contain some graphic reports that represent aggregated data and          some tabular reports.</p>        <p>Building a dashboard in DaDaBIK is very easy: first you create a          custom (PHP or HTML) page, then you embed all the reports (graphic or          tabular) you want by:</p>        <ul>          <li>clicking on the "show embed code" button you can find at the            bottom of each report in your DaDaBIK application (you can see it            only if you are logged in as admin)<br>            <br>            <img title="show embed code" alt="show embed code" src="images/show_embed_code.png"></li>          <li>paste the code (it's pure HTML) into the source code of the custom            page you have created (your dashaboard)</li>        </ul>        <p> </p>        <p> </p>        <p> </p>        <p> </p>        <p><a href="#general_information">[back to top]</a> </p>                        <h1><a name="beta_dev_mode"></a>11. The BETA development mode        </h1>        <hr size="1">                        <p><strong>INTRODUCTION</strong><br><br>        From the admin area, click on:<br><br><img src="images/dev_mode_settings.png" alt="DEV mode settings"><br><br> and you will access the Development Mode settings page. From there, you can set your DEV mode: LIVE or BETA.        When you are in Beta mode, changes you make in the admin area (e.g. you change a form or you set permissions differently) or in your custom code (e.g. you add a custom validation rule) are only visible to admins and (optionally) to other trusted users.<br><br>        When you want to make available your changes to everybody, you have to Publish your changes (PUSH). After PUSHing, Beta and Live are synchronized and they will be until you make new changes in Beta mode.<br><br>        <strong>Why is Beta mode useful?</strong><br><br>        Especially if you are working on complex and critical applications you want to carefully test your changes before making them public. Before DaDaBIK 12, this was typically done keeping two different instances (on two different URLs, with two different DBs) of the same DaDaBIK application: a Development instance and a Production instance. This was time consuming because you had to maintain two instances and manually synch them once your changes to the Dev instances were tested. Starting from DaDaBIK 12, you don't need this anymore, from one instance of DaDaBIK, through the Beta mode, you can test your work before deploying them to your final users.<br><br>        <p><strong>BEST PRACTICES</strong><br><br>        If you are new to DaDaBIK, we suggest to use DaDaBIK in LIVE mode to practice. When you feel confident and after having read this documentation chapter, you are ready to use the Beta mode :)<br><br>        After having switched to the Beta mode for the first time, you should use the PULL button to pull your LIVE changes to BETA. After that, your BETA is synchronized with your LIVE and you can start working on your application and deploy your changes to LIVE when they are tested and ready to be used by everyone.<br><br>        Remember that the Beta mode and the Live mode run into two different "boxes", this means that if you make changes to your Beta "Box", then you switch to Live (without PUSHing first) and make changes to your Live "Box" you will have changes both in Beta and in Live, so if you PULL, you will lose your Beta changes, if you PUSH you will lose your LIVE changes.<br><br>        <strong>Is Beta mode covering ALL changes made in the Admin Area?</strong><br><br>        Almost. All the changes you make in the admin area are covered by the Beta mode exept from: <br><br>        1) <strong>Status:</strong> when you change the status (available/maintenance) of your application and the users who can access an application in maintenance mode, these changes are immediately available to everyone. This is probably expected.  <br><br>        2) <strong>Data page</strong>: from the data page you manage your data structures (Tables and Views) and changes you make here are made on the final (and unique) DB so immediately available to everybody. For example if you add a field "birthdate" to your customers table, the customers table will be changed and your final users will immediately use the new version of the table. Remember, however, that you can play with granular permissions (if enabled, as they are by default); even if you allow a users group to see this new field (permissions tab), they actually won't see the field before you PUSH your changes, because Permissions are covered by the Beta mode. So users will use the new versions of the Customers table (with the added birthdate field) but they actually won't see the field because of lack of permissions.<br><br>        A good practice when you add a new field to a table in Beta mode is to set <i>Nullable</i> to yes, so the DBMS won't complain when users enter records with missing values for that field (that won't be in their form); you can then change <i>Nullable</i> to no, if you like, after having PUSHed your changes to LIVE.<br><br>                From the Data tab you can do other operations, including dropping fields, chaning field types, adding and dropping tables and views. Remember that the result of these operations is immediately available to your final users so evaluate, case by case, the possible effects, considering that you can probably play with permissions and form configurator to avoid problems. Let's make another example: from the DATA tab, while being in Beta Mode, you create a new table, <i>countries</i>; you can configure the table fields and permissions and you will see the related forms as admin but your final users won't see such table, even if the database already contains it, because before PUSHing to Live, they don't have permissions to see it.<br><br>                Additional example: what happens when you delete (drop) o rename a field in the Data Page? This is slightly more tricky: before you PUSH, the users of your applications may see errors because in LIVE, for DaDaBIK, the field still exists/has the old name but in the database it's already dropped/renamed. When you need to delete (drop) o rename a field, you should then put the system in <i>maintenance status</i>, delete/rename the fields, PUSH the changes and then put the system back in <i>available status</i>.<br><br>                What we have just discussed in this point 2) about the DATA page, is NOT true if you enable the BETA DATABASE, an option only available for DaDaBIK Platinum that we discuss in a separate chapter (see later in this page).<br><br>        <strong>How about custom code?</strong><br><br>        Custom code is also covered by Beta Mode, i.e. the code you add or the changes you make to your custom code when you are in Beta Mode are not visible to your final users until you PUSH your changes. This is possible thanks to a new set of custom code files, BETA custom code files, that you have to use instead of the <i>standard</i> ones:<br><br>        Instead of editing /include/custom_functions.php, you must edit include/custom_functions_beta.php<br><br>        Instead of editing any files contained in the /include/custom_functions folder, you must edit the corresponding file in the  /include/custom_functions_beta folder<br><br>        Instead of editing any files contained in the /include/custom_php_files folder, you must edit the corresponding file in the  /include/custom_php_files_beta folder<br><br>        Instead of editing any files contained in the /templates folder, you must edit the corresponding file in the  /templates_beta folder<br><br>        Instead of editing a language_custom.php file, you must edit a language_custom_beta.php file (e.g. /include/languages/english_custom_beta.php instead of /include/languages/english_custom.php)<br><br>        In some cases, _beta files are already available in the standard DaDaBIK release (e.g. you will find the /include/custom_functions_beta.php), in other cases you have to create them (e.g. let's say you want to create a PDF template named "customers", you have to create both the file /templates/customers.html and the file /templates_beta/customers.html<br><br>        When you PUSH your changes, all the BETA files will be used to replace the LIVE file. So if you always work in BETA mode, you should always edit ONLY the beta files.<br><br>        Remember that the config_custom.php file does not have a corresponding BETA file, so changes you make on it are immediately available to your final users even if you are in Beta mode.<br><br>        This should be an extremely rare situation but if, in your custom code, you directly used the dadabik_ tables, this is not handled by the Beta mode. For example if in your custom code you execute a query on the dadabik_permissions table, your query will be always executed on  dadabik_permissions, which reflects the current LIVE status (i.e. if you changed permissions in beta mode and haven't PUSH them yet, your query will be executed on the LIVE permissions).<br><br>        <strong>How about data created/modified/deleted?</strong><br><br>        Unless you use the BETA DATABASE feature (see later), the database is shared between Beta and Live, this means that, for example, if in your application you have a customers table and, in Beta Mode, you add a new customer, such customer will immediately be visible to your final users.<br><br>       <strong> Multiple Developers and Beta Mode</strong><br><br>        In DaDaBIK, you can have multiple users belonging to the Admin group, which means you can have multiple developers of the applications.<br>        When two developers are working on the same object (e.g. the same form) at the same time, there isn't any locking mechanism to prevent that changes by Developer A overrides changes just made by developer B. This regardless of the use of Beta mode. If you use Beta mode, you should also establish a shared development approach: all the developers should agree to use Beta mode (or to Stay in LIVE mode) otherwise if someone works in BETA and others in LIVE, the probability to lose your work becomes pretty high.<br><br>        Do not confuse multiple developers with multiple final users. Having multiple (even thousands) of users working on your app and maybe accessing and tryin to modify the same information (e.g. working at the same time on the same product record) is totally fine: DaDaBIK provides locking mechanisms so when User A is editing Product X, its record is locked and User B cannot edit the same product.<br><br>        <strong>THE BETA DATABASE</strong><br><br>        Only with DaDaBIK Platinum, you have an additional option: the use of a completely separated database when you are in Beta mode. To enable this option, you have set the config parameter $use_db_name_beta to 1.<br><br>        Everything explained above is still valid when $use_db_name_beta is enabled, however, since you are working in a separate DB, when you are in BETA mode you can for example add test records to test your app and your final users will not see such records, the production DB will be kept clean. <br><br>        When you set $use_db_name_beta to 1, before starting to work in Beta mode you need to create a full copy of your database; for example if the name of your DB is MyCRM (we call this PRODUCTION DB), you need to create a copy of such DB having a different name, for example, MyCRM_beta (we call this BETA DB), this is the DB DaDaBIK will use when you (and some selected trusted users) are in Beta Mode. You set the name of your beta DB with the config parameters $db_name_beta.<br><br>        Is there any disadvantage in using a Beta Database? Since you are using a separated DB, when you create/drop/alter a table or view (everything you do in the DATA tab), DaDaBIK applies the changes to the BETA DB and before PUSHing, you have to manually apply those changes to the production DB. For the same reasons mentioned before in this chapter, we suggest, before pushing, to put the system in <i>maintenance status</i>, manually (using PHPMyAdmin for MySQL or any other db admin tool) apply the schema changes to the production DB, PUSH your changes and then put the system back in <i>available status</i>.         We are only referring to the changes to the schema of the tables/views here, everything else you do in the ADMIN area (form configurator, permissions, ... ) is automatically published to the Production DB when you PUSH. As explained before, in case you add/modify/delete records when you are in Beta mode, the DB impacted will be the BETA one so in case you need those record changes in the PRODUCTION DB as well, you have to do it manually; this also includes users and groups, which are just records of the dadabik_users and dadabik_groups tables.<br><br>        Once you start using a Beta Database for an application, we suggest you keep doing it and avoid setting the $use_db_name_beta parameter back to 0. In case you need to do it, first PUSH your changes and apply the modifications of your schema (if any) to the PRODUCTION DB. When you decide to set $use_db_name_beta from 0 to 1, you always need to create a copy of your DB.<br><br>        The BETA DATABASE option at the moment is supported for MySQL and MS SQL Server, not for PostgreSQL and SQLite. If you use MS SQL Server, note that DaDaBIK assumes its internal tables (the ones whose name by default starts with dadabik_) are in the <i>dbo</i> schema (the default schema).<br><br>        <strong>HTTP API and BETA DB</strong>        <br><br>It is worth mentioning how HTTP API tokens are impacted by the use of a BETA DB: tokens generated after authentications are always stored in the PRODUCTION DB, the API selection method is also performed on the PRODUCTION DB, unless (this is very unlikely) the API CALL is made using the same browser a logged-in user (who is in Beta Mode) is using.<br><br>        In this live broadcast, The BETA development mode is discussed in depth: <br><br>                        <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/xUIv-Ts_Jzw?si=YWwo3A0iDncgLRt2&amp;start=370" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>                        <p><a href="#general_information">[back to top]</a> </p>                                                        <h1><a name="import_from_csv"></a>12. Import data from MS Excel/CSV/ODS        </h1>        <p style="display:inline;"><strong>(DaDaBIK Enterprise/Platinum only)</strong></p>        <hr size="1">        <p><strong>BASIC USAGE</strong> </p>        <p>The import feature allows you to import data from an external source:          a MS Excel, CSV or ODS file (from now on, a "data file"). To use the          feature, the config parameter $import_from_csv_feature must be set to          1. When this feature is enabled, for each table/view, in the results          grid, you will see an "import" button, click it to start the import          process.</p>        <p>By default, DaDaBIK expects to find, in your data file, for each          field you have in your insert form, a corresponding column in your          data file, having, in the first row, the name of field as it appears          in the database. All and only the fields for which you have insert          permissions set to YES will be considered, so if you have excluded a          field from the insert form it will not be considered even if it is          available in your data file.</p>        <p>During the import process, all the operations that DaDaBIK normally          does during a standard insert process are executed, so the values are          validated (required fields, field types), the operational hooks are          executed, the email alerts are sent&nbsp;… The duplication check is a          bit different, though: if you enable "Check for duplicated entries          during INSERT?" in form configurator, DaDaBIK will check for          duplicated records in the standard way, but if some duplications are          found, you can't choose "insert anyway" as you can do during a          standard insert operation, the import, instead, is cancelled. In case          you want to skip the duplication check during the import process, you          can set your config parameter $check_similarity_during_import = 0.          Having $check_similarity_during_import = 0 can be partially          compensated by enabling synchronization (see later).</p>        <p><strong>ADVANCED SETTINGS</strong> </p>        <p>In your config_custom.php file you can set several (optional)          parameters related to the import feature.&nbsp; <br>          <br>          <strong>Name of the sheet </strong></p>        <p>By default, DaDaBIK expects the name of the sheet equal to the name          of the table you are importing data in. You can change it; here, for          example, we set, as sheet name for the table "customers", the name          "customers2021"<br>          <br>        </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$csv_sheet_name['customers']          = 'customers2021';</div>        <br>        <br>        <strong>Name of the columns</strong>        <p></p>        <p>As we discussed at the beginning of this chapter, DaDaBIK expects to          find, in the first row of the sheet, the name of field as it appears          in the database. You can choose custom names. E.g. here, for the field          first_name_customer in the table customer, we set the column name in          our data file as "firstname"<br>          <br>        </p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$csv_col_names['customers']['first_name_customer']          = 'firstname';</div>        <p></p>        <p><strong>Transformation functions</strong></p>        <p>You might need to apply a transformation function to your data,          before register them in your database (for example, because in MS          Excel the content is represented using a different format respect to          the one required by your application/database). You can define, for          each field, a transformation function. For example here we set, for          the field "number_hours", table "projects", a function that replaces          the value with "0" if the value is an empty string. </p>        <p></p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$csv_transform_functions['projects']['number_hours']          = 'dadabik_transform_number_hours';          <p></p>          <p>function dadabik_transform_number_hours($value) {</p>          <p>if ($value === ''){</p>          <p>$value = '0'; </p>          <p>} </p>          <p>return $value; </p>          <p>} </p>        </div>        <p></p>        <p>Please note that you must always return a string (as it happens when          you submit an html form):<br>          <br>          return 0 → NO<br>          return '0' → YES</p>        <p><strong>Preview transformation functions</strong></p>        <p><strong></strong>After the upload, DaDaBIK displays a preview of the          data that is about to be imported. For each field, you can define a          preview transformation rule if you need to show the data in a          particular format in the preview. </p>        <p></p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$csv_format_preview_functions['projects']['number_hours']          = 'dadabik_format_preview_number_hours';          <p></p>          <p>function dadabik_format_preview_number_hours($value) { ……. }</p>        </div>        <p></p>        <p><strong>Max rows</strong></p>        <p>By default, DaDaBIK tries to import all the rows available in your          data file. However, you can set a maximum number of rows. In case the          maximum number of rows is reached, an error is generated and the          import process is cancelled.</p>        <p></p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$csv_max_rows['customers']          = 250;</div>        <p></p>        <p><strong>Synchronize your database with MS Excel/CSV/ODS (Platinum            only)</strong></p>        <p>By default, DaDaBIK process all the rows of your data file and for          each row executes an INSERT statement to add the row as a record in          your database. However, you might want to synchronize your table with          the data file, i.e. UPDATE the records in case in the data file there          is a row that corresponds to an existing record. To enable this          feature, you should set your $enable_import_csv_synch config parameter          to 1. If the feature is enabled, DaDaBIK, during the import process,          checks if the row is already available in the table: if it's not          available, the row is inserted as a new record; if it's already          available, the corresponding record is updated using the values          available in the row.</p>        <p>How can DaDaBIK recognize if a row in the data file is exactly the          record we already have in the database? Let's make an example. We have          an employees table:<br>          <br>          employees (<u>id</u>, name, email, office, desk_number)<br>          <br>          <i>id</i> is the unique field set in DaDaBIK for the table employees.          DaDaBIK, by default will use such field to understand if the employee          is importing is already available in the employees table.<br>          <br>          However, you can choose your own field and even a combination of          fields. For example here I will use the combination of<br>          office + desk number<br>          as my unique field for synchronization.</p>        <p></p>        <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">$csv_check_uniqueness_fields['employees'][]          = 'office';<br>          $csv_check_uniqueness_fields['employees'][] = 'desk_number'; </div>        <p></p>        <p>DaDaBIK will alert you during the import process if some records will          be updated (because they already exist according to your unique field)          and you can decide if you want to proceed or to cancel the process.          When an update operation is executed (instead of an insert operation),          all and only the fields for which you have edit permissions set to YES          will be considered from your data file.</p>        <p><strong>SOME ADDITIONAL NOTES: <br>          </strong></p>        <ul>          <li>The data file you upload is stored by default in the uploads_import folder            and then deleted when the process is completed. In case the import            process is not correctly completed, the uploaded file might remain            in the folder. For this reason, you should secure your            uploads_import folder so that it's impossible to access to the files            even if you know the URL. Please refer to the security section to see how to properly set upload_directory and upload_import_directory.</li>          <li>All the database operations executed during an import process            (several insert statements and other operations) are wrapped into a            database transaction, this means that even if one of the operation            fails for any reason, also the other operations will be cancelled            and the database will be reverted to its original state. If,            however, your insert process also executes non-db operations (e.g.            you send an email through the email notice or an after insert hook),            those operations are all executed until the actual error arises            (i.e. for some of the rows). This is valid also when the number of            rows set with $csv_max_rows is reached.</li>          <li>If, in your custom functions, you need to detect the function used            (e.g. for a custom validation where you distinguish between "insert"            and "update" validation), the function name to use is            "import_from_csv"</li>          <li>If for a field, in form configurator, you set the "prefix", a data            file's cell containing just the prefix will be considered blank, as            it happens with normal insert operations.</li>          <li>generic_file and image_file fields are not token into            consideration during the import process, even if you have the            corresponding columns in your data file; the corresponding PHP            array's element $_FILES[field_name_here]['name'] is set to empty            string.</li>          <li>For dates, a yyyy-mm-dd format is expected, but if in Excel the            column is correctly set as "date" and you don't apply any            transformation rule, any format is fine.</li>          <li>For select_single* and select_multiple* lookup fields, DaDaBIK            expects to receive the value of the primary key, not the value of            the linked field. So if you have a products table:<br>            <br>            products (<u>id_product</u>, name_product, id_brand)<br>            <br>            where <i>id_brand</i> is a select_single lookup field, DaDaBIK            expects to receive, for example, "5" (the id of the brand), and not            "Apple".</li>          <li>For seelct_multiple* fields, DaDaBIK expects to receive the            options selected in this form:<br>            <br>            "~option_1~option_2~….~option_N~"<br>            <br>            where ~ is the character you set as FORM_CONFIGURATOR_SEPARATOR in            config_custom (by default, "~"). The use of the import feature on a            table that is a details table in a master/details form is not            currently supported (even if the table is displayed as a "normal"            table in the menu).</li>                      <li>Records that are in your DB and are NOT in your Excel/CSV/ODS file are kept as they are, DaDaBIK does not delete any record during the import process.</li>        </ul>                <p>In this video you can see Import from Excel/CSV in action</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Bz9p0-7CVc4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>                <p> <a href="#general_information">[back to top]</a> </p>        <h1><a name="dadabik_wordpress_integration"></a>13. DaDaBIK Wordpress          Integration</h1>        <hr size="1">        <p>DaDaBIK is released together with a Wordpress plug-in which allows to          integrate a DaDaBIK application into a Wordpress site's page.</p>        <p>Furthermore, users authenticated through Wordpress can also be          (optionally) automatically authenticated into DaDaBIK too, without          logging-in again. The Wordpress authentication feature requires that          the DaDABIK application is installed in a subdirectory of the          Wordpress site (same domain) and that the same users (same username)          is available both in Wordpress and DaDaBIK.</p>        <p>Follow the instruction included in the <i>wordpress_plugin</i>          folder to install and configure the plugin.</p>                  <p>In case the area of your DaDaBIK app, in the Wordpress page, seems to be too small, check if you are experiencing the issue described here: <a href="https://dadabik.com/forum/read.php?1,23793,23804" target="_blank">https://dadabik.com/forum/read.php?1,23793,23804</a>                <p>In this video tutorial, you will see, step-by-step, how to use DaDaBIK to add No-Code CRUD capabilities and auto-updatable Charts to your WordPress site.</p>        <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/vseiC85RY-o" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>        <p> <a href="#general_information">[back to top]</a> </p>        <h1><a name="api"></a>14. HTTP API</h1>        <p style="display:inline;"><strong>(DaDaBIK Platinum only)</strong></p>        <hr size="1">        <p>You can access a DaDaBIK application also through an <strong>HTTP            API</strong>. This allows authorized external applications / Web          sites to access the data managed by a DaDaBIK application. Such          external applications / Web sites can be build using any kind of          technology / programming language (PHP, Python, Java ...), they can          access your DaDaBIK application simply by calling an URL and          specifying some parameters, DaDaBIK will reply with a JSON document.</p>        <p>To use the HTTP API, you have to set $enable_http_api = 1 in          config.php and, optionally, set the users you want to enable the API          for using the $enable_rest_api_user_ids config.php parameter.</p>        <p>At the moment, the API has two available methods: <strong>authentication</strong>          and <strong>selection</strong>.</p>        <h2>Authentication</h2>        <p>This method allows you to get a <em>token</em> that you can then use          for selections and, in future, for other operations. The token grants,          until its&nbsp; (configurable) expiration, all the privileges the          corresponding user has.</p>        <p><strong>URL</strong>: login.php?function=get_token</p>        <p><strong>METHOD</strong>: POST</p>        <p><strong>PARAMETERS</strong>:</p>        <p><strong>username_user</strong>: the username of the user you want to          authenticate</p>        <p><strong>password_user</strong>: the password of the user you want to          authenticate</p>        <p><strong>RESPONSE</strong></p>        <p>A JSON document containing the following attributes:</p>        <ul>          <li><strong>status</strong>: regardless of the response, its value            must be "ok", otherwise an unhandled error occurred.<strong></strong></li>          <li><strong>result</strong>: possible values:</li>          <ul>            <li><strong>authentication error</strong>: username/password not              correct or user not enabled for HTTP API</li>            <li><strong>account blocked error</strong>: username blocked after              too many wrong authentication attempts</li>            <li><strong>input error:</strong> username and/or password are empty</li>            <li><strong>general error:</strong>: any other error</li>            <li><strong>done:</strong> success, a token has been generated</li>          </ul>          <li><strong>error_message</strong>: if an error occurred, a more            detailed error message</li>          <li><strong>token_value</strong>: the alphanumeric token generated </li>        </ul>        <br>        <p><strong>SELECTION</strong><br>        <br>        This method allows you to get records from a specific table / view,        specifying search and sort criteria.<br>        <br>        <strong>URL</strong>:        index.php?function=search&amp;tablename=[YOURTABLENAME]&amp;execute_search=1&amp;from_api=1&amp;export_to_json=1&amp;records_per_page=[NUMBEROFRECORDS]&amp;page=[PAGENUMBER,        STARTING FROM 0]&amp;order=[ORDER BY FIELD]&amp;order_type=[ORDER TYPE:        ASC OR DESC]<br>        <br>        <strong>METHOD</strong>: POST<br>        <br>        <strong>ADDITIONAL PARAMETERS</strong>:<br>        <br>        <strong>operator</strong>: must be <strong>and</strong> or <strong>or</strong>,        it's the boolean operator you want to use to connect your search        criteria<br>        <strong>username_user</strong>: the username of the user you want to use        to execute the selection<br>        <strong>token</strong>: the token you got with the authentication<br>        <strong>dadabik_____check_post</strong>: must always be "1" (the first        part of the name, "dadabik_____" depends on $alias_prefix and        $prefix_internal_table in your config.php, if you leave the default        values, it's dadabik_____)<br>        <strong>search criteria</strong>:<br>        here you can specify a list of attribute name and value + a list of        search operators, one for each attribute.<br>        <br>        Example of request, get all the customers from Berlin having age &gt;        30, order by id_customer DESC, get 100 records per page and show me the        first page<br>        <br>        &lt;form method="POST"action="index.php?function=search&amp;tablename=customers&amp;execute_search=1&amp;from_api=1&amp;export_to_json=1&amp;records_per_page=100&amp;page=0&amp;order=id_customer&amp;order_type=desc"&gt;<br>        <br>        &lt;input type="hidden" name ="operator" value="and"&gt;<br>        &lt;input type="hidden" name ="city_customer__select_type"        value="is_equal"&gt;<br>        &lt;input type="hidden" name ="city_customer" value="Berlin"&gt;<br>        &lt;input type="hidden" name ="age_customer__select_type"        value="greater_than"&gt;<br>        &lt;input type="hidden" name ="age_customer" value="30"&gt;<br>        &lt;input type="hidden" name ="username_user" value="root"&gt;<br>        &lt;input type="hidden" name ="token"        value="124c5288d857eecf72284cbe23efff6026"&gt;<br>        &lt;input type="hidden" name ="dadabik_____check_post" value="1"&gt;<br>        &lt;input type="submit" value="View Records"&gt;<br>        &lt;/form&gt;<br>        <br>        The suffix "__select_type" reflects what you set as        $select_type_select_suffix in config.php, if you leave the default        value, it's "__select_type".<br>        <br>        <strong>RESPONSE</strong><br>        <br>        A JSON document containing the following attributes:<br>        <br>        &nbsp;&nbsp;&nbsp; <strong>status</strong>: regardless of the response,        its value must be "ok", otherwise an unhandled error occurred.<br>        &nbsp;&nbsp;&nbsp; <strong>total_rows</strong>: the total number of        records corresponding to your search criteria<br>        &nbsp;&nbsp;&nbsp; <strong>rows</strong>: an array of results record;        for each record you get, for each record's attribute, its value<br>        <br>        A few notes about how the values of a record's attributes are        represented in the Json document:<br>        <ul>          <li>you get all the attributes that, for the user specified in            username_user, are available in the details page of a record</li>          <li>you get all the rows that the user specified in username_user is            allowed to see (so ownership permissions, for example, apply) </li>          <li>custom formatting functions are not applied</li>          <li>standard formatting functions are not applied (e.g. an email field            is displayed in a DaDaBIK app using a mailto: link, in Json just as            text); only dates are formatted according to the config.php            parameter $date_format</li>          <li>NULL values are correctly represented as NULL, except when they            are related to linked fields, in that case they are represented as            an empty string </li>        </ul>        <p>In case an handled error occurred, you will get a different response:          <br>          <br>          &nbsp;&nbsp;&nbsp; <strong>status</strong>: regardless of the          response, its value must be "ok", otherwise an unhandled error          occurred.<br>          &nbsp;&nbsp;&nbsp; <strong>result</strong>: "generic_error"<br>          &nbsp;&nbsp;&nbsp; <strong>error_message</strong>: the actual error          message<br>          <br>        </p>        <p>In this video, you will see, step by step, how to use HTTP API.</p>                <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/5s8ssw3uIu8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>                <p><strong>VIEW CUSTOM PAGES</strong><br>        <p>Since V. 11.9, it is also possible to access via HTTP a DaDaBIK custom page, simply by adding to its URL:<br><br>         &from_api=1<br><br>                 and passing <em>username_user</em>, <em>token</em> and <em>dadabik_____check_post</em> as you do for SELECTION. The response is handled by your (custom) code but DaDaBIK, according to the corresponding user's permissions, grants (or not) the user the possibility to access the page.                         <h1><a name="revisions"></a>15. Audit/Revisions</h1>        <p style="display:inline;"><strong>(DaDaBIK Platinum only)</strong></p>        <hr size="1">        <p>This feature allows to track the history of changes related to a          record. You can enable it for a table/view from the <i>pages</i> tab,          admin section. After any insert, update or delete operation, the          current version of the record involved is registered in a table,          together with date/time information and the user who executed the          query.</p>        <p>Admin users can see the list of revisions by clicking on the "show          revisions" button: the button under a results grid to show all the          revisions for a table, the button under a record edit form to only see          the revisions related to that record.</p>        <p>Please note that: </p>        <ul>          <li>To correctly track insert operations, you NEED an auto_increment dadabik             unique field (typically, it's the primary key) for the table you want to track revisions. If, despite            the fact you have this auto_increment field, you specify the value of            the field during an insert, the revision feature could work            no correctly and track the wrong ID. If you use PostgreSQL, the unique field doesn't need to be auto increment.</li>          <li>In case of master/details view, the audit/revisions feature treats            separately each of the tables involved. </li>          <li>Operations executed by custom code, unless you use custom code API (see custom code API chapter for details), are not audited. </li>          <li>Operations executed on the users and groups tables are not            audited. </li>          <li>Operations executed automatically by your DBMS (e.g. a "cascade"            delete that your DBMS executes because you set a referential            integrity constraint) are not audited.</li>          <li>If you change the primary key/unique field for your table or you change the            primary key/unique field value for a record, you will lose the link with the            related revisions. </li>        <li>If an update operation changes the primary key/unique field value for a record, the revision will not be correctly registered: it could be NOT registered or registered as linked to another (wrong) record.</li>                      <li>If $delete_files_when_delete_record is 1 in config.php, after a            deletion you loose the files (if any) related to the record, even if            revisions are enabled. </li>        <li>If in your DBMS the transaction isolation level is set to a level lower than "Repeatable reads" (e.g. this happens by default in MS SQL Server, the default isolation level is in fact "Read committed"), it may happen that, if a "delete all" or "delete selected" operation is concurrent to an insert/update/delete operation on the same table, DaDaBIK doesn't correctly register in revisions, as deleted records, all and only the records actually deleted.</i>                          <li>The first time you execute an operation on a table, a            dadabik_revision table is created (e.g. for a customers table, a            dadabik_revisions_customers table is created). Such revision table            reflects the current schema of the main table, if you change the            schema of the main table by adding/removing fields, you should            manually adjust the schema of the revisions table; if you change the            schema of the main table by changing field types, you should also            adjust the schema of the revisions table, unless you set            $use_text_fields_for_revisions_table = 1. </li>          <li>The first time you execute an operation on a table, a            dadabik_revision table is created (e.g. for a customers table, a            dadabik_revisions_customers table is created). Such revision table            and its content (the "history" of the records) is not deleted            automatically when you disable revisions for the related table or if            you drop the related table. </li>        </ul>                <p>In this video you can see audit/revisions in action</p>    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/iFFBbYEjlts" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>            <h1><a name="live_edit"></a>16. Live edit</h1>        <hr size="1">        <p>Starting from V. 11 you can edit records "live", from the results          grid, without opening a record in edit mode. To enable/disable this feature,          you have to set the config parameter $enable_live_edit (by default, starting from V. 11.2, it is enabled).<br>          You can easily change the value of a cell: double click the cell,          modify its value and then press enter (or press ESC to cancel the          edit). This is a first version of the live edit feature, having some          limitations that we will resolve in the future: </p>        <ol>          <li>Live edit is not optimized for mobile devices (or in general for            "touch" devices)</li>          <li>It only works if you enable authentication and granular            permissions (by default, they are both enabled)</li>          <li>It only works for some field types (text, textarea, non-lookup select_single and select_single_radio, date, date_time), in a table where you don't use custom validation            functions, custom display/required functions and calculated fields. In all the other cases, if you double click a cell a message will invite you to edit its value using the            traditional "edit record" approach.</li>          <li>There is no checkbox for setting a cell as "NULL", so you should            keep the default values for $treat_blank_as_null (enabled) and            $null_checkbox (disabled)</li>          <li>No tooltips/hints will be displayed during live edit</li>          <li>The "Other" option for select_single/select_single_radio fields is not available during live edit</li>          <li>It doesn't work for grids in a master/details view</li>          <li>It doesn't work for the users and groups tables</li>        </ol>        <p>Apart from these limitations, live edit works exactly as the "standard" edit: values are validated (standard validation e.g. email validation), before and after update hooks are executed, email notices are sent, "record locking" rules are respected. <br/> <br/>                Starting from V. 11.2, you can also decide to enable live edit only for <i>specific</i> fields, using the $allowed_fields_live_edit parameter; this parameter also allows you to override some live edit limitations (i.e. in a table where you use custom validation functions, custom display/required functions or calculated fields). Let's see some examples:<br/><br/>                <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>          $enable_live_edit = 1;</br>          </p>        </div>                <p>The above is the default situation, live edit is enabled for all the fields where it is possible to enable it (considering the limitations explained before).</p>                <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>          $enable_live_edit = 0;</br>          </p>        </div>                <p>Live edit is disabled.</p>                <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>          $enable_live_edit = 1;</br>          $allowed_fields_live_edit['customers']['name_customers'] = 1;</br>          $allowed_fields_live_edit['customers']['address_customers'] = 1;</br>          </p>        </div>                <p>In the example above, since there is at least one element for $allowed_fields_live_edit, DaDaBIK will allow live edit only on the table customers, for the fields name_customer and address_customer (again, if they respect the limitation we discussed before).</p>                <div style="color:black;background:white;border:solid      gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;">          <p>          $enable_live_edit = 1;</br>          $allowed_fields_live_edit['customers']['name_customers'] = 1;</br>          $allowed_fields_live_edit['customers']['address_customers'] = 1;</br>          $allowed_fields_live_edit['products']['name_product'] = 2;</br>          </p>        </div>                <p>In this last example, in addition to name_customer and address_customer, also name_product (table products) is allowed and since we set the corresponding element to 2, DaDaBIK will allow live edit EVEN if the products table has custom validation functions, custom display/required functions or calculated fields.</p>                <p>Using the value 2 can be dangerous but if you know what you are doing you have a lot of flexibility. Let's try to understand why, in general, live edit is not allowed if you have custom validation functions, custom display/required functions or calculated fields. Your custom functions, when used in standard insert/edit form, might need to access the values of one or more fields you have in the form. These values are NOT available when you are in the results grid, so this can lead to errors and unexpected behaviour. Furthermore, your custom functions might trigger a value change in a form field or make a field disappear (think about calculated fields or conditional fields): this at the moment can't be reproduced on the results grid so, again, it can lead to errors and unexpected behaviour.<br>However, there are cases where it is safe to use live edit even if you are in one of those "forbidden" situations. For example let's say you have a calculated field <i>price_tax_product</i>, that is calculated as price_product + taxes and let's assume for simplicity that it's the only custom function you use on the products table. Since you use this calculated field on the products table, DaDaBIK will forbid the user of live edit on ALL the products fields, however, for example, it would be totally safe to use live edit on <i>name_product</i> so you could set 2 for $allowed_fields_live_edit['products']['name_product'].</p>                <p>In this video, you will learn how live edit works in DaDaBIK.</p>        <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/XY41sHSNObs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>                 <h1><a name="language"></a>17. Language translations</h1>        <hr size="1">        <h2>Front-end translation</h2>        <p>DaDaBIK has been translated into 22 languages.&nbsp; Some of the          language translations are incomplete. If you open your language file          (e.g. include/languages/spanish.php ) you can find the sentences not          translated looking at the <strong>// to change</strong> comments at          the end of each file row. You can complete the translation if you          want. You are more than welcome to contribute to the localization          sending back to<strong> info [at] dadabik [dot] org</strong> your          improved translation.</p>        <p>A better way to modify a translation if you don't like the original          one, however, is to use, instead of the original file (e.g.          english.php) the corresponding custom file (english_custom.php); this          is very useful to avoid losing your custom translations during the          upgrade of DaDaBIK. It is also possible to differentiate your custom          translations according to the table the user is using. Open the file          include/languages/english_custom.php to read the simple instructions          you need to override an original translation. </p>        <p>          If you are using the <a href="#beta_dev_mode">BETA dev mode</a>, you need, for each custom language file, also a custom beta file (e.g. if you have an italian_custom.php file, you also need an italian_custom_beta.php file).</p>         <p>Adding a new language translation is also pretty straightforward. For          example, imagine you want to add <strong>Hindi</strong>: you just          need to create a copy of the file <strong>/include/languages/english.php</strong>,          rename it as <strong>hindi.php</strong>, and edit all the sentences          of the file (for each row, the quoted part after the arrow). You can          then add the language to the list of available choices adding 'hindi'          to the parameter $languages_ar is <strong>/include/config.php</strong>.        </p>        <h2>Multi-language support for labels, hints and tooltips<br>        </h2>        <p>Starting from DaDaBIK 10, not only the general front-end interface is          localized, but you can also specify multiple translations for your          form field labels, hints and tooltips. For example, if you have a <i>customers</i>          form having a <i>name</i> field, you may want to display <i>name</i>          as label if the user chooses English as language, <i>nome</i> if the          user chooses Italian and so on: in this case, for the label parameter          of the form configurator you will specify something like:<br>        </p>        <p>EN:name~IT:nome~DE:name~ES:nombre (assuming your form configurator          separator is ~, the default one)<br>        </p>        <p>In order to use this feature, you have to enable it from config.php,          setting $enable_multilanguage_labels = 1; you can also speficy a          default translation with $default_language_missing_translation.<br>        </p>        <p>In this video you will see some advanced uses of language translations in DaDaBIK.</p>                <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/LkWTD7do16U" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br><br>        <a href="#general_information">[back to top]</a>        <h1><a name="performances"></a>18. Performances</h1>        <hr size="1">        <p> DaDaBIK has been designed to provide good performances even when you          need to manage a huge amount of data. For an example, look at the          online demo n.3 (ERP demo) and in particular try to browse the <em>reviews</em>          table, containing <em>one million</em> records and two lookup fields.</p>        <p>The performances of a DaDaBIK applications mainly depends:</p>        <p>1) On the database (and DBMS) the application is based on: if the SQL          queries that DaDaBIK needs to execute are too slow, of course to the          final user will perceive the application as slow. At this level, to          increase the performances, you can:</p>        <ul>          <li>Optimize the design of your database, for example by adding            indexes and/or modifying the way you spread information through your            tables.</li>          <li>Use a machine providing better performances</li>        </ul>        <p>2) On the complexity of the application you have developed: in          particular the total number of table fields and user groups you have          in your application and the number of lookup fields you have in the          table you are managing can impact on the performances. At this level,          to optimize the performances, you can:</p>        <ul>          <li>(of course) reduce the number of fields, user groups and lookup            fields</li>          <li>set $always_refresh_permissions = 0 (see config.php for further            details)</li>          <li>move to PHP7: if you are still using PHP 5, please note that            DaDaBIK takes advantage of PHP 7 and guarantees better performance            running with it</li>        </ul>        <p><a href="#general_information">[back to top]</a></p>        <h1><a name="security"></a>19. Security</h1>        <hr size="1"> <p>Here is some security-related information which you must        know:        <ul>          <li>If your DaDaBIK instance is public and you have disabled            authentication (by default IS enabled), please consider disabling            the export to CSV feature from <strong>/include/config.php</strong>            because robots, accessing the CSV export link, could consume an            inordinate amount of processor time.</li>          <li>You should have session.auto_start = 0 in your php.ini (by            default, it's 0). If you set it to 1, DaDaBIK cannot set a custom            session name and cookie path and this could make your application            less secure. Starting from V. 10.4, DaDaBIK shows a warning if you            have session.auto_start = 1. Before V 10.4, with session.auto_start            = 0 DaDaBIK could also have unexpected behaviour.</li>          <li>As upload_directory and upload_import_directory, you should choose a folder that is <strong>above</strong>            the WEB DOCUMENT ROOT or at least PROTECT the directory from public            access, otherwise anyone who knows the URL of a file you have            uploaded via DaDaBIK can access the file itself, even without            logging-in. By default, the /uploads folder contains an .htaccess            file which should prevent public access on Apache, please test it            because it might not work in your environment; if you change the            default upload directory or use a different Web server than Apache            you should provide the needed security by yourself.</li>          <li>If you use SQLite, you should store your SQLite database file            outside the Web root or protect it from public acces, otherwise            anyone who knows the URL of the file can access it, even without            logging-in.</li>          <li>You should protect the templates directory from public access,            otherwise anyone who knows the URL of a template file can access the            file itself, even without logging-in. Normally template files don't            contain private information but they could. By default, the            /templates folder contains an .htaccess file which should prevent            public access on Apache, please test it because it might not work in            your environment; if you use a different Web server than Apache you            should provide the needed security by yourself.</li>          <li>After having installed and configured a DaDaBIK application, it's            a good practice to remove the files install.php, install2.php,            upgrade.php, upgrade2.php, up.2 and up2.php since they could be used            by malicious users in order to change or even re-install your            DaDaBIK installation.</li>          <li>The files admin.php, datagrid_configurator.php, db_synchro.php,            internal_table_manager.php, permissions_manager.php and            tables_inclusion.php can also be used to modify your application. If            authentication is enabled, the access to the files will be            protected, otherwise you should remove those files. For additional            security, you can however remove the files even if authentication is            enabled.</li>          <li>The HTML content type and the rich_editor field type can lead to            high security risks: DaDaBIK uses the popular <a href="http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed">htmLawed</a>            library to prevent displaying of dangerous HTML/Javascript code but,            as the authors state, (<a href="http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/htmLawed_README.htm">http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/htmLawed_README.htm</a>),there            are some minor cases in which htmLawed can fail. If a malicious user            insert some arbitrary javascript code and the library fails in            recognizing it, the code can be then executed by other users just by            using the application. Among other problems, this can lead to XSS            attack (<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>),which            in turn can allow an unauthorized access to the application (<a href="http://en.wikipedia.org/wiki/Session_hijacking">http://en.wikipedia.org/wiki/Session_hijacking</a>)            and, if the Internet browser of the user contains security holes,            even the execution of arbitrary code in the client machine.<br><br>            Furthermore, for TinyMCE (the rich-text editor we use in the front end for the rich_editor field type and in the admin area for the rich editors we have in pages tab > custom pages) we use V.6.8.3, which is not the latest TinyMCE version: V7.x has been released but its license has been changed and the new license seems not compatible with the DaDaBIK's license, consider this and check the TinyMCE change log if you decide to use rich_editor in your DaDaBIK applicaiton.</li>          <li>If you set rules to limit the records the admin group can see (for            example using the ownership permissions or the row-level custom            rules), please note that, using the form configurator live preview,            an admin user might see a record he/she is not allowed to see. This,            normally, doesn't represent a problem because typically admin users            don't have limits/filters on the records they can see.</li>        </ul>        <p>Other security-related issues are described in the section <a href="#bugs">Known          bugs, limitations and unexpected behaviors</a>        <p><a href="#general_information">[back to top]</a></p>        <h1><a name="backup"></a>20. Backup</h1>        <hr size="1">        <p>If you want to do a backup of your DaDaBIK application, you have to:        </p>        <ol>          <li>Copy everything you have in your DaDaBIK folder (the one            containing index.php) and its subfolder (you could create a ZIP file            of the entire folder and put it in a safe place) </li>          <li>Create a database dump of your entire database (for MySQL, for            example, you can use <a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html">mysqldump</a>            or any other similar utility) </li>        </ol>        <p>Files + database allow you, in case you need it, to restore your          DaDaBIK application exactly in the situation it was when you made the          backup. To restore a "dump" of your database, refer to the documentation of the DBMS you are using (for MySQL, for example, <a href="https://dev.mysql.com/doc/refman/8.0/en/reloading-sql-format-dumps.html" target="_blank">this manual page</a> explains how to do it).</p>        <p>During the execution of the backup, nobody (neither admins nor final          users) should use your application or your database</p>        <p>Starting from V. 12, DaDaBIK provides, in the Admin area, an "Export app" feature that allows to export files and database in one click.        <p><a href="#general_information">[back to top]</a></p>         <h1><a name="best_practices"></a>21. Best Practices</h1>        <hr size="1">        <p>In these blog posts (<a target="_blank" href="https://blog.dadabik.com/post/112">part 1</a> and <a target="_blank" href="https://blog.dadabik.com/post/113">part 2</a>) you can find some best practices for the development of Web applications using DaDaBIK. </p>        <a href="#general_information">[back to top]</a>        <br><br>       <h1><a name="faqs"></a>22. FAQs</h1>        <hr size="1">        <p>Please read the FAQ document.</p>        <a href="#general_information">[back to top]</a>        <br><br>        <h1><a name="bugs"></a>23. Known bugs, limitations and unexpected          behaviors</h1>        <hr size="1">        <p>Please check also the <a href="https://dadabik.com/forum/index.php?forums/bugs.6/" target="_blank">Bugs forum</a> to see the latest bugs discovered.</p>                 <ul>          <li>UTF-8 related:</li>          <ul>            <li>DaDaBIK supports UTF-8; however, malformed UTF-8 characters can              lead to unexpected results such as content corruption. The use of              the HTML content type or of the rich text editor, in combination              with UTF-8 content, is another factor that could lead,              theoretically, to unexpected results.</li>          </ul>          <li>Security/data-integrity related:</li>          <ul>            <li>Malicious users could exploit a field with content type set to              HTML or field type set to rich_edit to insert arbitrary javascript              code, this can lead to security risks if the htmLawed library              doesn't filter this content properly (see above, security section,              for all the details).</li>          </ul>          <li>Table and field names related:<br>          </li>          <ul>            <li>The use, in a DaDaBIK application, of tables and fields whose              names is longer than 64 characters or contain quote characters              (such as ' ` "), blank spaces, semicolumns, dots and characters              which need to be escaped (such as \, NULL byte) can lead to              problems and security issues. The same for field names containing              the value set in config.php for the parameters $alias_prefix,              $null_checkbox_prefix, $select_type_select_suffix,              $select_checkbox_prefix, $field_button_hint_container_id_prefix,              $custom_button_ids_prefix. DaDaBIK, in case you are using table or              field names containing such characters, displays a warning              message; in some cases, the use of such characters can generate a              query execution error. </li>          </ul>          <li>Primary Key / Unique field related:<br>          </li>          <ul>            <li>DaDaBIK requires, for each table you want to use, a "unique              field" (see admin -&gt; pages). Typically, this unique field is              the primary key of the table. If your records, for that field,              contains characters which need to be escaped (such as single              quote, double quote, backslash or the NUL byte), you can              experience problems and security issues. Here we are not referring              to the field name (as in the previous point) but to the value              stored in a field. The same rule applies to the values of the              $users_table_id_field field, in case you are using a custom users              table. </li>              <li>The $enable_lookup_insert_popup = 1 feature only works if the "linked table" has an auto-increment primary key (that is also set as the <i>unique field</i> in the DaDaBIK -> Admin -> Pages page). In case you use PostgreSQL, however, it works even if the field is not auto-increment.</li>          </ul>          <li>User interface related:<br>          </li>          <ul>            <li>Some language translations are not completed. If you open your              language file (e.g. include/languages/spanish.php ) you can find              the sentences not translated looking at the <strong>// to change</strong>              comments at the end of each file row. You can complete the              translation if you want.</li>            <li>The rich editor interface (TinyMCE) is displayed in english              only. </li>          </ul>          <li>PosgreSQL related:<br>          </li>          <ul>            <li>DaDaBIK needs table names in lower case to work on PostgreSQL. </li>          </ul>          <ul>            <li>If you use cascade fields and the cascade parent field is a              numeric field, you might get a "SQLSTATE[22P02]: Invalid text              representation" error. </li>          </ul>          <ul>            <li>You can't use, for a DaDaBIK application, tables/views coming              from different schemas, they need to be in the same              database/schema. </li>          </ul>          <ul>          </ul>          <ul>            <li>The value you see in the "extra" column (admin, data tab), at              the moment is still not 100% reliable, e.g. you can see the value              empty even if the field is actully serial; we suggest to always              check if a field is serial also from a db administration tool.</li>          </ul>          <li>MySQL related:<br>          </li>          <ul>            <li>DaDaBIK doesn't support the BIT MySQL field type. </li>                                    <li>If you use a MySQL version < 8 and you set Data types: simple in your Data -> settings page, you might see, in the Data page, the field type as blank for integer fields.</li>          </ul>          <li>MS SQL Server related:<br>          </li>          <ul>            <li>You cannot specify the schema to use inside your database. When              you build a DaDaBIK application on MS SQL Server, you specify a              database and DaDaBIK, by default, reads all the tables belonging              to all the schemas (you can, however, exclude tables by using the              $tables_to_exclude setting in config.php). This also means that              you cannot have two tables having the same name in two different              schemas of the same database. </li>          </ul>          <li>Admin section related:<br>          </li>                    <ul>            <li>The applications you create with DaDaBIK support multiple, concurrent, users: record locking and other mechanisms are used to prevent data loss or unexpected behaviour when multiple users are working on the same data. The ADMIN area (the area you access when you click on "Edit this App"), however, is not designed for supporting multiple concurrent developers working on it: two admin users (or the same users accessing from two different clients/browser tabs) working at the same time on the admin area of the same application, could lead to unexpected and unpredictable behaviour.</li>          </ul>          <ul>            <li>The field renaming feature of the administration page doesn't              work as expected if the renamed field is used in one of the              following properties: "Primary key field", "Linked fields", "Order              by", "Where clause" in the forms configurator related to any of              the tables. In particular, after the renaming, you will get "[08]              Error: during query execution" messages from the DaDaBIK front              end; you should edit the above properties by hand, renaming the              field in the forms configurator. </li>          </ul>          <ul>            <li>The "refresh installation" admin operation doesn't work              correctly and could lead to a forms configurator settings loss if              the installation is the result of an upgrade from a DaDaBIK              version &lt; 4.1 rc2; the "refresh installation" bug is considered              fixed only for tables installed (DaDaBIK installation from scratch              or single table installation from the admin interface) using a              DaDaBIK version &gt;= 4.1 rc2.</li>          </ul>          <li>WordPress related:<br>          </li>          <ul>            <li>A bug related to the loss of DaDaBIK session when used with the WordPress plugin is explain in detail <a href="https://dadabik.com/forum/index.php?threads/wordpress-authentication-dadabik-session-is-lost-when-a-wp-page-is-loaded.24546/">here</a>. </li>          </ul>          <li>Others:</li>          <ul>            <li>If a user has insert or edit permissions on a table and the table contains at least a field set as image_file or generic_file, the user may be able to upload a file even if they don't have edit/insert permission on the file field. The file would  be stored only in the file system, in the system temporary upload folder and in the dadabik upload folder, without be recorded in the related record.</li>            <li>The "previous" and "next" buttons don't work correctly after              this sequence of operations: - perform a search based on a field A              - change the value the field A for a record of the result set. Fore more details about previous/next and page navigation unexpected behaviour, check the next chapter: "Previous/Next buttons and page navigation bar, unexpected behavior".  </li>          </ul>          <ul>            <li>Database BIT and Boolean field types at the moment are not fully              supported, use INT (1/0) or char(Y/N) instead. </li>          </ul>          <ul>            <li>If you execute a standard search or a search by URL using a select_multiple field, the related field in the quick search filter is not properly filled with the value you used.</li>          </ul>          <ul>            <li>If you have two (ore more) select_single* fields in the same form having the same lookup table and you add a new option using the popup insert ($enable_lookup_insert_popup = 1), the new option will be immediately available for the listbox you are working on but not for the other ones (they will be available after having reloaded the page).</li>          </ul>          <ul>            <li>DaDaBIK needs a "unique field" to identify each single record in              a table. Typically, this field is the primary key of the table but              if the primary key is composed by multiple columns, DaDaBIK cannot              use it, you have to add an additional unique field (or, for MySQL,              let DaDaBIK add such field, see $add_additional_dadabik_id_field              in config.php). </li>            <li>Upload and deletion of multiple files during the same              insert/update/delete operation are not considered as a unique              atomic operation: e.g. if you are uploading multiple files from              the same form and one of the uploads fails, other files already              uploaded will result available in the file system.</li>            <li>The "check for duplicated" feature doesn't work with file field              types: DaDaBIK doesn't warn about similarity when two files have a              similar name</li>            <li>The "check for duplicated" feature causes uploads to fail during insert, in particular the files are not uploaded if some possible duplicated records are found and the user decides to insert it anyway. This, however, happens only if "classic" upload is set, if you leave the default value for $upload_field_type default ("ajax"), the bug does not occur.            <li>The "check for duplicated"              feature doesn't work with date, date_time, insert_date and              update_date field typed and with all fields which are hidden in              the insert form.</li>            <li>HTML content is not set correctly as "Default value" (form              configurator). </li>            <li>When a new option of a select_single field with linked fields is              inserted through the "other..." option, the current user is not              inserted in the ID_user field of the linked table. This means that              the new record in the linked table won't get an owner and              the&nbsp; owner permissions won't work as expected. </li>            <li>If, while editing a record, you change the value of the primary              key, DaDaBIK is not able to show you the updated record after              saving.</li>            <li>If an insert/edit form needs to be re-displayed because an error              occurred (e.g. a missing required field), FILE fields (only file              fields) don't preserve the values set by the user before              submitting the form</li>            <li>The "insert as new" feature doesn't work for generic_file /              image_file fields and if the record is a master of a              master/details view, the details records are not inserted.</li>            <li>If an image_file or generic_file field is used as a linked field              for a lookup field, the file is not showed if the user doesn't              have read permissions on the corresponding linked table.</li>            <li>Records selection checkboxes are not displayed&nbsp; for the              results grid in a master/details view.</li>            <li>The "DATA" tab in the admin section, introduced with DaDaBIK 10,              at the moment has been implemented for MySQL, PostgreSQL and MS              SQL Server, not for SQLite.</li>            <li>The revision feature, introduced with DaDaBIK 10, at the moment              has been implemented for MySQL, PostgreSQL and SQLite, not for MS              SQL Server.</li>            <li>The default value parameter in form configurator does not work for select_single and  select_single_radio fields if you open the an insert form as the details part of a master/details form.</li>                        <li>When you add a record to a lookup table using the + sign close to the lookup field, if a possible duplication is detected, the process is not correctly completed (the record is inserted but the lookup field in the underlying form is not updated). </li>                                  </ul>          <li>Unexpected behaviors (not really DaDaBIK bugs but behaviors which            the average user doesn't expect)</li>          <ul>            <li>DaDaBIK relies on the $timezone parameter for date functions              (e.g. to produce the current date), which can be different from              the client's (user) one.</li>            <li>The value actually inserted in the database during an              insert/update, if the value typed in the form is not part of the              domain specified during table creation (e.g. integer,              varchar,...), depends on the DBMS settings and on the domain              itself. For example if an integer field is left blank during              insert/update (not NULL, blank), MySQL could insert 0 as value,              because an empty string is not part of the integer domain and very              often the default value for integers is set to 0.</li>            <li>Formatting tags automatically inserted in a field through the              HTML editor are not filtered during search so if you search "hey              good" and you have "&lt;b&gt;hey&lt;/b&gt; good morning" in your              field you won't find it.</li>            <li>If you set a master/details view between table A (master) and              table B (details) and you perform a search on B and then access              (in edit or details mode) a record of the table A, you will then              lose the search filter you had in B.</li>            <li>The Wordpress and DaDaBIK session expirations are not              synchronized: if your session expires in Wordpress it doesn't mean              it automatically expires in DaDaBIK. Use the logout button in              Wordpress to be sure to disconnect to both Wordpress and DaDaBIK</li>            <li>If you have enabled the Wordpress authentication, you should              login/logout through Wordpress without using DaDaBIK              login/lougout; mixing Wordpress and DaDaBIK login/logout can lead              to unexpected behaviours.</li>            <li>If an error occurs during installation or upgrade, the              installation of DaDaBIK can ends up in a inconsistent state due to              implicit commit policies of the DBMS.</li>            <li>Old versions of Microsoft Excel for Mac can't correctly              represent UTF-8 characters for CSV files produced by DaDaBIK</li>          </ul>        </ul>        <a href="#general_information">[back to top]</a><br><br>        <h1><a name="prev_next_unexpected"></a>24. Previous/Next buttons and page navigation bar, unexpected behavior</h1>        <hr size="1">                <p>How do the "previous" and "next" record buttons work? How does the page navigation bar ("Page x of y") work?<br><br>It's important to understand how these features work because their behaviour could be unexpected for the final users of your application.<br><br>Let's start with the "previous" and "next" buttons, the buttons you can see when you click on the "edit" or "details" icon in the result grid to access, one by one, the records beloning to the current result set.<br><br>Let's say you have a table "cars" and you want to edit (or just see, one by one) all the cars having a price < 15000.<br><br>Imagine what you would do if your database was on paper (one paper sheet for each car): you could take from the folder all the sheets related to cars having price < 15000 (let's say there are 25 cars), modify them by changing some data (for example the price) and then put them back in the folder. When you take those 25 sheets, you are sure you are going through all the cars having price < 15000 and while you are working, nobody can take your 25 sheets or modify them.<br><br>What happens in your DaDaBIK app is a bit different. Let's say you search for cars having a price < 15000, you get your results (25 records), your order by price, you enter the first record (in edit mode), you modify the first record, then you click on "next", you modify the second record and so and so fourth. The total number of records you will go through could be 25 as expected but could also be less than 25 or more than 25. Why?<br><br>When you click on "next", the system re-executes the search query, find the position of the record you are viewing in the current recordset and then opens the record that, considering the current sorting, is immediately after that. If, while you are modifying the first record, someone adds a car having price < 15000, you could see this new record as a second, instead of the record you expected to see and you will finally go through 26 records instead of 25. If, while you are modifying the first record, someone deletes the second record, you will finally go through 24 records instead of 25. These two scenarios, however, are not problematic. <br><br>Let's see another case that is much more problematic: you modify the price of the first car, it was 7000 (the cheaper car, so the first record) and you change it to 145000 (one of the most expensive, let's say the 23th car): when you click on "next", you will see record 24 and then record 25 and you won't go through all the records between the 2nd and 22th.<br><br>Consider that on the recordset (cars having a price < 15000) you are working on, other users could also work at the same time (DaDaBIK provides a locking mechanism, but it prevents other users to edit the record you are working on, not an entire recordset you are working on!) so while you are editing the 3rd record, another user could change the price of the most expensive car (25th record) and make it the cheaper (1st record) so you won't see such modified car by using the "next" button, because you are already on record 3.<br><br>This is just an example but there are other cases of EDIT (made by the current user or other users) that can modify the current result set or the position of the records in the set and therefore if you are viewing, one by one, all the records belonging to your results set ("NEXT", "NEXT", "NEXT", ...), you could skip some of the records or you could see the same record twice.<br><br>This is not something easy to fix. In order to replicate what happens in the "physical" world, we should lock all the records belonging to your results set; this can be problematic, though, because maybe they are not free to be locked (other users are using them) and your results set could be so big that you need to lock the entire table.<br><br>The only safe way to work with "previous" "next" if your goal is to review all the records belonging to a results set is to sort the result by a field that nobody can modify and that you are not filtering on. Typically this field is the primary key of the table. It can still happen that some records disappear (because other users delete them) or some additional records appear (because other users add them) but at least you are sure you are not skipping records matching your search filter.<br><br>How about the page navigation bar? The behaviour is similar.<br><br>Let's say, again, that you search for cars having price < 15000, you get 25 results and you have 10 record per page. You want to give a short look at all the records, starting from the cheaper (you sort by price) without entering the edit/details pages; you stay on the results grid, you use the navigation bar and you assume you will see al the records. <br><br>After having read the first page (first 10 records) you click on page 2. While you are reading page 1, however, another user changes the price of the 11th car, which is now cheaper and gets position 10. Therefore, after having clicked on "page 2" link, you wont see the original 11th record, you will see again the 10th, and you will never see the original 11th (which is now on page 1).<br>Again, this is just an example but modifications made on the records belonging to the current result set can have an impact on the records you will see by clicking on the pages link.        <a href="#general_information">[back to top]</a><br>        <br>        <br>        <p><strong>The content of this manual is copyrighted by Eugenio Tacchini</strong></p>      </li>    </ul>  </body></html>